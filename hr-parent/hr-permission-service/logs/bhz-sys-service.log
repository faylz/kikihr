2017-07-11 09:01:51  [ main:10815 ] - [ ERROR ]  Could not get a databaseId from dataSource
 com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1129)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:358)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2498)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2535)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2320)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:46)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:347)
	at java.sql.DriverManager.getConnection(DriverManager.java:579)
	at java.sql.DriverManager.getConnection(DriverManager.java:190)
	at org.logicalcobwebs.proxool.DefaultConnectionBuilder.buildConnection(DefaultConnectionBuilder.java:39)
	at org.logicalcobwebs.proxool.Prototyper.buildConnection(Prototyper.java:159)
	at org.logicalcobwebs.proxool.ConnectionPool.getConnection(ConnectionPool.java:211)
	at org.logicalcobwebs.proxool.ProxoolDataSource.getConnection(ProxoolDataSource.java:97)
	at org.apache.ibatis.mapping.VendorDatabaseIdProvider.getDatabaseProductName(VendorDatabaseIdProvider.java:76)
	at org.apache.ibatis.mapping.VendorDatabaseIdProvider.getDatabaseName(VendorDatabaseIdProvider.java:61)
	at org.apache.ibatis.mapping.VendorDatabaseIdProvider.getDatabaseId(VendorDatabaseIdProvider.java:49)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:445)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1120)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1280)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1187)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1421)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:802)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:542)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:436)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:412)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1105)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1202)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.openhr.test.Provider.main(Provider.java:9)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:69)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:157)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391)
	at java.net.Socket.connect(Socket.java:579)
	at java.net.Socket.connect(Socket.java:528)
	at java.net.Socket.<init>(Socket.java:425)
	at java.net.Socket.<init>(Socket.java:241)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:256)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:308)
	... 66 more
2017-07-11 09:01:51  [ Prototyper:10817 ] - [ ERROR ]  Prototype
 com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1129)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:358)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2498)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2535)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2320)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:46)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:347)
	at java.sql.DriverManager.getConnection(DriverManager.java:579)
	at java.sql.DriverManager.getConnection(DriverManager.java:190)
	at org.logicalcobwebs.proxool.DefaultConnectionBuilder.buildConnection(DefaultConnectionBuilder.java:39)
	at org.logicalcobwebs.proxool.Prototyper.buildConnection(Prototyper.java:159)
	at org.logicalcobwebs.proxool.Prototyper.sweep(Prototyper.java:102)
	at org.logicalcobwebs.proxool.PrototyperThread.run(PrototyperThread.java:44)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:69)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:157)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391)
	at java.net.Socket.connect(Socket.java:579)
	at java.net.Socket.connect(Socket.java:528)
	at java.net.Socket.<init>(Socket.java:425)
	at java.net.Socket.<init>(Socket.java:241)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:256)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:308)
	... 18 more
er.java:159)
	at org.logicalcobwebs.proxool.Prototyper.sweep(Prototyper.java:102)
	at org.logicalcobwebs.proxool.PrototyperThread.run(PrototyperThread.java:44)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:69)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:157)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391)
	at java.net.Socket.connect(Socket.java:579)
	at java.net.Socket.connect(Socket.java:528)
	at java.net.Socket.<init>(Socket.java:425)
	at java.net.Socket.<init>(Socket.java:241)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:256)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:308)
	... 18 more
2017-07-11 09:01:52  [ main:11617 ] - [ DEBUG ]  Parsed mapper file: 'file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\mapper\UserMapper.xml]'
2017-07-11 09:01:52  [ main:12013 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:01:53  [ main:12422 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:01:53  [ main:12510 ] - [ WARN ]  Exception encountered during context initialization - cancelling refresh attempt
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.openhr.pm.UserService': Cannot resolve reference to bean 'dubbo' while setting bean property 'protocols' with key [1]; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'dubbo' is defined
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:382)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:157)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.openhr.test.Provider.main(Provider.java:9)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'dubbo' is defined
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:687)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	... 17 more
2017-07-11 09:01:53  [ DubboShutdownHook:12516 ] - [ INFO ]   [DUBBO] Run shutdown hook now., dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:01:53  [ ShutdownHook:12517 ] - [ DEBUG ]  Running ShutdownHook
2017-07-11 09:01:53  [ Shutdown Hook:12518 ] - [ INFO ]  Shutting down 'null' pool immediately [Shutdown Hook]
2017-07-11 09:01:53  [ Shutdown Hook:12520 ] - [ INFO ]  'null' pool has been closed down by Shutdown Hook in 2 milliseconds.
2017-07-11 09:01:53  [ DubboShutdownHook:12521 ] - [ INFO ]   [DUBBO] Close all registries [], dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:01:53  [ Shutdown Hook:12521 ] - [ DEBUG ]  No connections required manual removal.
2017-07-11 09:01:53  [ Shutdown Hook:12522 ] - [ INFO ]  Stopping Prototyper thread
2017-07-11 09:01:53  [ Shutdown Hook:12523 ] - [ INFO ]  Stopping HouseKeeper thread
2017-07-11 09:28:15  [ main:0 ] - [ INFO ]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2017-07-11 09:28:16  [ main:919 ] - [ DEBUG ]  Identified candidate component class: file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\com\openhr\pm\mapper\UserMapper.class]
2017-07-11 09:28:16  [ main:920 ] - [ DEBUG ]  Creating MapperFactoryBean with name 'userMapper' and 'com.openhr.pm.mapper.UserMapper' mapperInterface
2017-07-11 09:28:16  [ main:923 ] - [ DEBUG ]  Enabling autowire by type for MapperFactoryBean with name 'userMapper'.
2017-07-11 09:28:26  [ main:10877 ] - [ DEBUG ]  Logging initialized using 'class org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2017-07-11 09:28:26  [ main:11379 ] - [ DEBUG ]  Parsed configuration file: 'class path resource [mybatis/mybatis-config.xml]'
2017-07-11 09:28:26  [ main:11592 ] - [ DEBUG ]  Registered shutdownHook
2017-07-11 09:28:26  [ main:11597 ] - [ DEBUG ]  Registering 'null' house keeper
2017-07-11 09:28:26  [ main:11601 ] - [ DEBUG ]  Starting a house keeper thread
2017-07-11 09:28:29  [ main:13881 ] - [ ERROR ]  Could not get a databaseId from dataSource
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1129)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:358)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2498)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2535)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2320)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:46)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:347)
	at java.sql.DriverManager.getConnection(DriverManager.java:579)
	at java.sql.DriverManager.getConnection(DriverManager.java:190)
	at org.logicalcobwebs.proxool.DefaultConnectionBuilder.buildConnection(DefaultConnectionBuilder.java:39)
	at org.logicalcobwebs.proxool.Prototyper.buildConnection(Prototyper.java:159)
	at org.logicalcobwebs.proxool.ConnectionPool.getConnection(ConnectionPool.java:211)
	at org.logicalcobwebs.proxool.ProxoolDataSource.getConnection(ProxoolDataSource.java:97)
	at org.apache.ibatis.mapping.VendorDatabaseIdProvider.getDatabaseProductName(VendorDatabaseIdProvider.java:76)
	at org.apache.ibatis.mapping.VendorDatabaseIdProvider.getDatabaseName(VendorDatabaseIdProvider.java:61)
	at org.apache.ibatis.mapping.VendorDatabaseIdProvider.getDatabaseId(VendorDatabaseIdProvider.java:49)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:445)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1120)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1280)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1187)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1421)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:802)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:542)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:436)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:412)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1105)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1202)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.openhr.test.Provider.main(Provider.java:9)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:69)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:157)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391)
	at java.net.Socket.connect(Socket.java:579)
	at java.net.Socket.connect(Socket.java:528)
	at java.net.Socket.<init>(Socket.java:425)
	at java.net.Socket.<init>(Socket.java:241)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:256)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:308)
	... 66 more
2017-07-11 09:28:29  [ main:13881 ] - [ ERROR ]  Could not get a databaseId from dataSource
 com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1129)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:358)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2498)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2535)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2320)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:46)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:347)
	at java.sql.DriverManager.getConnection(DriverManager.java:579)
	at java.sql.DriverManager.getConnection(DriverManager.java:190)
	at org.logicalcobwebs.proxool.DefaultConnectionBuilder.buildConnection(DefaultConnectionBuilder.java:39)
	at org.logicalcobwebs.proxool.Prototyper.buildConnection(Prototyper.java:159)
	at org.logicalcobwebs.proxool.ConnectionPool.getConnection(ConnectionPool.java:211)
	at org.logicalcobwebs.proxool.ProxoolDataSource.getConnection(ProxoolDataSource.java:97)
	at org.apache.ibatis.mapping.VendorDatabaseIdProvider.getDatabaseProductName(VendorDatabaseIdProvider.java:76)
	at org.apache.ibatis.mapping.VendorDatabaseIdProvider.getDatabaseName(VendorDatabaseIdProvider.java:61)
	at org.apache.ibatis.mapping.VendorDatabaseIdProvider.getDatabaseId(VendorDatabaseIdProvider.java:49)
	at org.mybatis.spring.SqlSessionFactoryBean.buildSqlSessionFactory(SqlSessionFactoryBean.java:445)
	at org.mybatis.spring.SqlSessionFactoryBean.afterPropertiesSet(SqlSessionFactoryBean.java:336)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1625)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1562)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:539)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1120)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireByType(AbstractAutowireCapableBeanFactory.java:1280)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1187)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getTypeForFactoryBean(AbstractBeanFactory.java:1421)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.getTypeForFactoryBean(AbstractAutowireCapableBeanFactory.java:802)
	at org.springframework.beans.factory.support.AbstractBeanFactory.isTypeMatch(AbstractBeanFactory.java:542)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doGetBeanNamesForType(DefaultListableBeanFactory.java:436)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanNamesForType(DefaultListableBeanFactory.java:412)
	at org.springframework.beans.factory.BeanFactoryUtils.beanNamesForTypeIncludingAncestors(BeanFactoryUtils.java:187)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.findAutowireCandidates(DefaultListableBeanFactory.java:1105)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1044)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:942)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:533)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:88)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(AutowiredAnnotationBeanPostProcessor.java:331)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1202)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.openhr.test.Provider.main(Provider.java:9)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:69)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:157)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391)
	at java.net.Socket.connect(Socket.java:579)
	at java.net.Socket.connect(Socket.java:528)
	at java.net.Socket.<init>(Socket.java:425)
	at java.net.Socket.<init>(Socket.java:241)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:256)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:308)
	... 66 more
2017-07-11 09:28:29  [ Prototyper:13883 ] - [ ERROR ]  Prototype
com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1129)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:358)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2498)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2535)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2320)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:46)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:347)
	at java.sql.DriverManager.getConnection(DriverManager.java:579)
	at java.sql.DriverManager.getConnection(DriverManager.java:190)
	at org.logicalcobwebs.proxool.DefaultConnectionBuilder.buildConnection(DefaultConnectionBuilder.java:39)
	at org.logicalcobwebs.proxool.Prototyper.buildConnection(Prototyper.java:159)
	at org.logicalcobwebs.proxool.Prototyper.sweep(Prototyper.java:102)
	at org.logicalcobwebs.proxool.PrototyperThread.run(PrototyperThread.java:44)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:69)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:157)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391)
	at java.net.Socket.connect(Socket.java:579)
	at java.net.Socket.connect(Socket.java:528)
	at java.net.Socket.<init>(Socket.java:425)
	at java.net.Socket.<init>(Socket.java:241)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:256)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:308)
	... 18 more
2017-07-11 09:28:29  [ Prototyper:13883 ] - [ ERROR ]  Prototype
 com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure

The last packet sent successfully to the server was 0 milliseconds ago. The driver has not received any packets from the server.
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.SQLError.createCommunicationsException(SQLError.java:1129)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:358)
	at com.mysql.jdbc.ConnectionImpl.coreConnect(ConnectionImpl.java:2498)
	at com.mysql.jdbc.ConnectionImpl.connectOneTryOnly(ConnectionImpl.java:2535)
	at com.mysql.jdbc.ConnectionImpl.createNewIO(ConnectionImpl.java:2320)
	at com.mysql.jdbc.ConnectionImpl.<init>(ConnectionImpl.java:834)
	at com.mysql.jdbc.JDBC4Connection.<init>(JDBC4Connection.java:46)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:525)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:411)
	at com.mysql.jdbc.ConnectionImpl.getInstance(ConnectionImpl.java:416)
	at com.mysql.jdbc.NonRegisteringDriver.connect(NonRegisteringDriver.java:347)
	at java.sql.DriverManager.getConnection(DriverManager.java:579)
	at java.sql.DriverManager.getConnection(DriverManager.java:190)
	at org.logicalcobwebs.proxool.DefaultConnectionBuilder.buildConnection(DefaultConnectionBuilder.java:39)
	at org.logicalcobwebs.proxool.Prototyper.buildConnection(Prototyper.java:159)
	at org.logicalcobwebs.proxool.Prototyper.sweep(Prototyper.java:102)
	at org.logicalcobwebs.proxool.PrototyperThread.run(PrototyperThread.java:44)
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.connect0(Native Method)
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:69)
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:339)
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:200)
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:182)
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:157)
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:391)
	at java.net.Socket.connect(Socket.java:579)
	at java.net.Socket.connect(Socket.java:528)
	at java.net.Socket.<init>(Socket.java:425)
	at java.net.Socket.<init>(Socket.java:241)
	at com.mysql.jdbc.StandardSocketFactory.connect(StandardSocketFactory.java:256)
	at com.mysql.jdbc.MysqlIO.<init>(MysqlIO.java:308)
	... 18 more
2017-07-11 09:28:29  [ main:14232 ] - [ DEBUG ]  Parsed mapper file: 'file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\mapper\UserMapper.xml]'
2017-07-11 09:28:30  [ main:14613 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:28:30  [ main:15054 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:28:30  [ main:15175 ] - [ WARN ]  Exception encountered during context initialization - cancelling refresh attempt
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.openhr.pm.UserService': Cannot resolve reference to bean 'dubbo' while setting bean property 'protocols' with key [1]; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'dubbo' is defined
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:382)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:157)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.openhr.test.Provider.main(Provider.java:9)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'dubbo' is defined
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:687)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	... 17 more
2017-07-11 09:28:30  [ DubboShutdownHook:15187 ] - [ INFO ]   [DUBBO] Run shutdown hook now., dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:28:30  [ ShutdownHook:15192 ] - [ DEBUG ]  Running ShutdownHook
2017-07-11 09:28:30  [ DubboShutdownHook:15193 ] - [ INFO ]   [DUBBO] Close all registries [], dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:28:30  [ Shutdown Hook:15194 ] - [ INFO ]  Shutting down 'null' pool immediately [Shutdown Hook]
2017-07-11 09:28:30  [ Shutdown Hook:15195 ] - [ INFO ]  'null' pool has been closed down by Shutdown Hook in 2 milliseconds.
2017-07-11 09:28:30  [ Shutdown Hook:15196 ] - [ DEBUG ]  No connections required manual removal.
2017-07-11 09:28:30  [ Shutdown Hook:15196 ] - [ INFO ]  Stopping Prototyper thread
2017-07-11 09:28:30  [ Shutdown Hook:15197 ] - [ INFO ]  Stopping HouseKeeper thread
2017-07-11 09:30:50  [ main:1 ] - [ INFO ]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2017-07-11 09:30:50  [ main:296 ] - [ DEBUG ]  Identified candidate component class: file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\com\openhr\pm\mapper\UserMapper.class]
2017-07-11 09:30:50  [ main:297 ] - [ DEBUG ]  Creating MapperFactoryBean with name 'userMapper' and 'com.openhr.pm.mapper.UserMapper' mapperInterface
2017-07-11 09:30:50  [ main:300 ] - [ DEBUG ]  Enabling autowire by type for MapperFactoryBean with name 'userMapper'.
2017-07-11 09:30:55  [ main:5451 ] - [ DEBUG ]  Logging initialized using 'class org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2017-07-11 09:30:55  [ main:5659 ] - [ DEBUG ]  Parsed configuration file: 'class path resource [mybatis/mybatis-config.xml]'
2017-07-11 09:30:55  [ main:5712 ] - [ DEBUG ]  Registered shutdownHook
2017-07-11 09:30:55  [ main:5717 ] - [ DEBUG ]  Registering 'null' house keeper
2017-07-11 09:30:55  [ main:5721 ] - [ DEBUG ]  Starting a house keeper thread
2017-07-11 09:30:56  [ Prototyper:6111 ] - [ DEBUG ]  Remembering default value: getTransactionIsolation() = 4
2017-07-11 09:30:56  [ Prototyper:6112 ] - [ DEBUG ]  Remembering default value: getHoldability() = 2
2017-07-11 09:30:56  [ Prototyper:6112 ] - [ DEBUG ]  Remembering default value: getCatalog() = zhrclound
2017-07-11 09:30:56  [ Prototyper:6114 ] - [ DEBUG ]  Remembering default value: isReadOnly() = false
2017-07-11 09:30:56  [ Prototyper:6114 ] - [ DEBUG ]  Remembering default value: getTypeMap() = {}
2017-07-11 09:30:56  [ Prototyper:6115 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 09:30:56  [ Prototyper:6117 ] - [ DEBUG ]  000000 (01/02/00) - Connection #2 created to achieve minimum of 2 = AVAILABLE
2017-07-11 09:30:56  [ main:6117 ] - [ DEBUG ]  000000 (01/02/00) - Connection #1 created on demand = ACTIVE
2017-07-11 09:30:56  [ main:6287 ] - [ DEBUG ]  Implementing interface java.sql.Connection
2017-07-11 09:30:56  [ main:6288 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.ConnectionProperties
2017-07-11 09:30:56  [ main:6289 ] - [ DEBUG ]  Implementing interface java.lang.AutoCloseable
2017-07-11 09:30:56  [ main:6290 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.Connection
2017-07-11 09:30:56  [ main:6290 ] - [ DEBUG ]  Implementing interface java.io.Serializable
2017-07-11 09:30:56  [ main:6291 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.MySQLConnection
2017-07-11 09:30:56  [ main:6293 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 09:30:57  [ main:7433 ] - [ DEBUG ]  Implementing interface java.sql.DatabaseMetaData
2017-07-11 09:30:57  [ main:7436 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 09:30:57  [ main:7851 ] - [ DEBUG ]  Parsed mapper file: 'file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\mapper\UserMapper.xml]'
2017-07-11 09:30:58  [ main:8003 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:30:58  [ main:8241 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:30:58  [ main:8327 ] - [ WARN ]  Exception encountered during context initialization - cancelling refresh attempt
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.openhr.pm.UserService': Cannot resolve reference to bean 'dubbo' while setting bean property 'protocols' with key [1]; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'dubbo' is defined
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:382)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:157)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.openhr.test.Provider.main(Provider.java:9)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'dubbo' is defined
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:687)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	... 17 more
2017-07-11 09:30:58  [ DubboShutdownHook:8405 ] - [ INFO ]   [DUBBO] Run shutdown hook now., dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:30:58  [ DubboShutdownHook:8422 ] - [ INFO ]   [DUBBO] Close all registries [], dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:30:58  [ ShutdownHook:8406 ] - [ DEBUG ]  Running ShutdownHook
2017-07-11 09:30:58  [ Shutdown Hook:8425 ] - [ INFO ]  Shutting down 'null' pool immediately [Shutdown Hook]
2017-07-11 09:30:58  [ Shutdown Hook:8429 ] - [ DEBUG ]  000001 (00/01/00) - #0001 removed because of shutdown.
2017-07-11 09:30:58  [ Shutdown Hook:8446 ] - [ DEBUG ]  Connection #1 closed
2017-07-11 09:30:58  [ Shutdown Hook:8450 ] - [ DEBUG ]  000001 (00/00/00) - #0002 removed because of shutdown.
2017-07-11 09:30:58  [ Shutdown Hook:8450 ] - [ DEBUG ]  Connection #2 closed
2017-07-11 09:30:58  [ Shutdown Hook:8451 ] - [ INFO ]  'null' pool has been closed down by Shutdown Hook in 26 milliseconds.
2017-07-11 09:30:58  [ Shutdown Hook:8451 ] - [ INFO ]  Stopping Prototyper thread
2017-07-11 09:30:58  [ Shutdown Hook:8452 ] - [ INFO ]  Stopping HouseKeeper thread
2017-07-11 09:43:23  [ main:0 ] - [ INFO ]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2017-07-11 09:43:23  [ main:229 ] - [ DEBUG ]  Identified candidate component class: file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\com\openhr\pm\mapper\UserMapper.class]
2017-07-11 09:43:23  [ main:231 ] - [ DEBUG ]  Creating MapperFactoryBean with name 'userMapper' and 'com.openhr.pm.mapper.UserMapper' mapperInterface
2017-07-11 09:43:23  [ main:234 ] - [ DEBUG ]  Enabling autowire by type for MapperFactoryBean with name 'userMapper'.
2017-07-11 09:43:27  [ main:3860 ] - [ DEBUG ]  Logging initialized using 'class org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2017-07-11 09:43:27  [ main:4018 ] - [ DEBUG ]  Parsed configuration file: 'class path resource [mybatis/mybatis-config.xml]'
2017-07-11 09:43:27  [ main:4059 ] - [ DEBUG ]  Registered shutdownHook
2017-07-11 09:43:27  [ main:4063 ] - [ DEBUG ]  Registering 'null' house keeper
2017-07-11 09:43:27  [ main:4065 ] - [ DEBUG ]  Starting a house keeper thread
2017-07-11 09:43:27  [ Prototyper:4357 ] - [ DEBUG ]  Remembering default value: getTransactionIsolation() = 4
2017-07-11 09:43:27  [ Prototyper:4358 ] - [ DEBUG ]  Remembering default value: getHoldability() = 2
2017-07-11 09:43:27  [ Prototyper:4358 ] - [ DEBUG ]  Remembering default value: getCatalog() = zhrclound
2017-07-11 09:43:27  [ Prototyper:4359 ] - [ DEBUG ]  Remembering default value: isReadOnly() = false
2017-07-11 09:43:27  [ Prototyper:4360 ] - [ DEBUG ]  Remembering default value: getTypeMap() = {}
2017-07-11 09:43:27  [ Prototyper:4360 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 09:43:27  [ Prototyper:4362 ] - [ DEBUG ]  000000 (00/01/00) - Connection #2 created to achieve minimum of 2 = AVAILABLE
2017-07-11 09:43:27  [ main:4364 ] - [ DEBUG ]  000000 (01/02/00) - Connection #1 created on demand = ACTIVE
2017-07-11 09:43:27  [ main:4431 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.MySQLConnection
2017-07-11 09:43:27  [ main:4432 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.ConnectionProperties
2017-07-11 09:43:27  [ main:4432 ] - [ DEBUG ]  Implementing interface java.sql.Connection
2017-07-11 09:43:27  [ main:4433 ] - [ DEBUG ]  Implementing interface java.io.Serializable
2017-07-11 09:43:27  [ main:4434 ] - [ DEBUG ]  Implementing interface java.lang.AutoCloseable
2017-07-11 09:43:27  [ main:4434 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 09:43:27  [ main:4435 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.Connection
2017-07-11 09:43:28  [ main:5136 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 09:43:28  [ main:5138 ] - [ DEBUG ]  Implementing interface java.sql.DatabaseMetaData
2017-07-11 09:43:28  [ main:5425 ] - [ DEBUG ]  Parsed mapper file: 'file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\mapper\UserMapper.xml]'
2017-07-11 09:43:28  [ main:5554 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:43:28  [ main:5705 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:43:29  [ main:5803 ] - [ WARN ]  Exception encountered during context initialization - cancelling refresh attempt
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.openhr.pm.service.UserService': Cannot resolve reference to bean 'userService' while setting bean property 'ref'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'userService' is defined
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.openhr.test.Provider.main(Provider.java:9)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'userService' is defined
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:687)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	... 15 more
2017-07-11 09:43:29  [ DubboShutdownHook:5862 ] - [ INFO ]   [DUBBO] Run shutdown hook now., dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:43:29  [ ShutdownHook:5864 ] - [ DEBUG ]  Running ShutdownHook
2017-07-11 09:43:29  [ Shutdown Hook:5869 ] - [ INFO ]  Shutting down 'null' pool immediately [Shutdown Hook]
2017-07-11 09:43:29  [ DubboShutdownHook:5871 ] - [ INFO ]   [DUBBO] Close all registries [], dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:43:29  [ Shutdown Hook:5874 ] - [ DEBUG ]  000001 (00/01/00) - #0001 removed because of shutdown.
2017-07-11 09:43:29  [ Shutdown Hook:5874 ] - [ DEBUG ]  Connection #1 closed
2017-07-11 09:43:29  [ Shutdown Hook:5875 ] - [ DEBUG ]  000001 (00/00/00) - #0002 removed because of shutdown.
2017-07-11 09:43:29  [ Shutdown Hook:5876 ] - [ DEBUG ]  Connection #2 closed
2017-07-11 09:43:29  [ Shutdown Hook:5876 ] - [ INFO ]  'null' pool has been closed down by Shutdown Hook in 7 milliseconds.
2017-07-11 09:43:29  [ Shutdown Hook:5877 ] - [ INFO ]  Stopping Prototyper thread
2017-07-11 09:43:29  [ Shutdown Hook:5878 ] - [ INFO ]  Stopping HouseKeeper thread
2017-07-11 09:44:06  [ main:0 ] - [ INFO ]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2017-07-11 09:44:07  [ main:231 ] - [ DEBUG ]  Identified candidate component class: file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\com\openhr\pm\mapper\UserMapper.class]
2017-07-11 09:44:07  [ main:232 ] - [ DEBUG ]  Creating MapperFactoryBean with name 'userMapper' and 'com.openhr.pm.mapper.UserMapper' mapperInterface
2017-07-11 09:44:07  [ main:234 ] - [ DEBUG ]  Enabling autowire by type for MapperFactoryBean with name 'userMapper'.
2017-07-11 09:44:10  [ main:3959 ] - [ DEBUG ]  Logging initialized using 'class org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2017-07-11 09:44:11  [ main:4120 ] - [ DEBUG ]  Parsed configuration file: 'class path resource [mybatis/mybatis-config.xml]'
2017-07-11 09:44:11  [ main:4156 ] - [ DEBUG ]  Registered shutdownHook
2017-07-11 09:44:11  [ main:4160 ] - [ DEBUG ]  Registering 'null' house keeper
2017-07-11 09:44:11  [ main:4163 ] - [ DEBUG ]  Starting a house keeper thread
2017-07-11 09:44:11  [ main:4449 ] - [ DEBUG ]  Remembering default value: getTransactionIsolation() = 4
2017-07-11 09:44:11  [ main:4451 ] - [ DEBUG ]  Remembering default value: getHoldability() = 2
2017-07-11 09:44:11  [ main:4451 ] - [ DEBUG ]  Remembering default value: getCatalog() = zhrclound
2017-07-11 09:44:11  [ main:4453 ] - [ DEBUG ]  Remembering default value: isReadOnly() = false
2017-07-11 09:44:11  [ main:4454 ] - [ DEBUG ]  Remembering default value: getTypeMap() = {}
2017-07-11 09:44:11  [ main:4455 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 09:44:11  [ Prototyper:4455 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 09:44:11  [ main:4458 ] - [ DEBUG ]  000000 (01/02/00) - Connection #1 created on demand = ACTIVE
2017-07-11 09:44:11  [ Prototyper:4458 ] - [ DEBUG ]  000000 (01/02/00) - Connection #2 created to achieve minimum of 2 = AVAILABLE
2017-07-11 09:44:11  [ main:4524 ] - [ DEBUG ]  Implementing interface java.lang.AutoCloseable
2017-07-11 09:44:11  [ main:4525 ] - [ DEBUG ]  Implementing interface java.sql.Connection
2017-07-11 09:44:11  [ main:4525 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 09:44:11  [ main:4526 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.Connection
2017-07-11 09:44:11  [ main:4526 ] - [ DEBUG ]  Implementing interface java.io.Serializable
2017-07-11 09:44:11  [ main:4527 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.ConnectionProperties
2017-07-11 09:44:11  [ main:4528 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.MySQLConnection
2017-07-11 09:44:12  [ main:5225 ] - [ DEBUG ]  Implementing interface java.sql.DatabaseMetaData
2017-07-11 09:44:12  [ main:5227 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 09:44:12  [ main:5519 ] - [ DEBUG ]  Parsed mapper file: 'file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\mapper\UserMapper.xml]'
2017-07-11 09:44:12  [ main:5632 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:44:12  [ main:5828 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:44:12  [ main:5939 ] - [ WARN ]  Exception encountered during context initialization - cancelling refresh attempt
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.openhr.pm.service.UserService': Cannot resolve reference to bean 'dubbo' while setting bean property 'protocols' with key [1]; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'dubbo' is defined
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:382)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:157)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.openhr.test.Provider.main(Provider.java:9)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'dubbo' is defined
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:687)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	... 17 more
2017-07-11 09:44:12  [ DubboShutdownHook:6025 ] - [ INFO ]   [DUBBO] Run shutdown hook now., dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:44:12  [ ShutdownHook:6029 ] - [ DEBUG ]  Running ShutdownHook
2017-07-11 09:44:12  [ Shutdown Hook:6036 ] - [ INFO ]  Shutting down 'null' pool immediately [Shutdown Hook]
2017-07-11 09:44:12  [ DubboShutdownHook:6037 ] - [ INFO ]   [DUBBO] Close all registries [], dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:44:12  [ Shutdown Hook:6042 ] - [ DEBUG ]  000001 (00/01/00) - #0001 removed because of shutdown.
2017-07-11 09:44:12  [ Shutdown Hook:6049 ] - [ DEBUG ]  Connection #1 closed
2017-07-11 09:44:13  [ Shutdown Hook:6067 ] - [ DEBUG ]  000001 (00/00/00) - #0002 removed because of shutdown.
2017-07-11 09:44:13  [ Shutdown Hook:6070 ] - [ DEBUG ]  Connection #2 closed
2017-07-11 09:44:13  [ Shutdown Hook:6071 ] - [ INFO ]  'null' pool has been closed down by Shutdown Hook in 35 milliseconds.
2017-07-11 09:44:13  [ Shutdown Hook:6072 ] - [ INFO ]  Stopping Prototyper thread
2017-07-11 09:44:13  [ Shutdown Hook:6073 ] - [ INFO ]  Stopping HouseKeeper thread
2017-07-11 09:56:29  [ main:0 ] - [ INFO ]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2017-07-11 09:56:29  [ main:234 ] - [ DEBUG ]  Identified candidate component class: file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\com\openhr\pm\mapper\UserMapper.class]
2017-07-11 09:56:29  [ main:235 ] - [ DEBUG ]  Creating MapperFactoryBean with name 'userMapper' and 'com.openhr.pm.mapper.UserMapper' mapperInterface
2017-07-11 09:56:29  [ main:237 ] - [ DEBUG ]  Enabling autowire by type for MapperFactoryBean with name 'userMapper'.
2017-07-11 09:56:33  [ main:3946 ] - [ DEBUG ]  Logging initialized using 'class org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2017-07-11 09:56:33  [ main:4102 ] - [ DEBUG ]  Parsed configuration file: 'class path resource [mybatis/mybatis-config.xml]'
2017-07-11 09:56:33  [ main:4141 ] - [ DEBUG ]  Registered shutdownHook
2017-07-11 09:56:33  [ main:4145 ] - [ DEBUG ]  Registering 'null' house keeper
2017-07-11 09:56:33  [ main:4148 ] - [ DEBUG ]  Starting a house keeper thread
2017-07-11 09:56:34  [ Prototyper:4465 ] - [ DEBUG ]  Remembering default value: getTransactionIsolation() = 4
2017-07-11 09:56:34  [ Prototyper:4466 ] - [ DEBUG ]  Remembering default value: getHoldability() = 2
2017-07-11 09:56:34  [ Prototyper:4467 ] - [ DEBUG ]  Remembering default value: getCatalog() = zhrclound
2017-07-11 09:56:34  [ Prototyper:4468 ] - [ DEBUG ]  Remembering default value: isReadOnly() = false
2017-07-11 09:56:34  [ Prototyper:4468 ] - [ DEBUG ]  Remembering default value: getTypeMap() = {}
2017-07-11 09:56:34  [ Prototyper:4469 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 09:56:34  [ main:4469 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 09:56:34  [ main:4471 ] - [ DEBUG ]  000000 (01/02/00) - Connection #1 created on demand = ACTIVE
2017-07-11 09:56:34  [ Prototyper:4471 ] - [ DEBUG ]  000000 (01/02/00) - Connection #2 created to achieve minimum of 2 = AVAILABLE
2017-07-11 09:56:34  [ main:4538 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 09:56:34  [ main:4539 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.MySQLConnection
2017-07-11 09:56:34  [ main:4539 ] - [ DEBUG ]  Implementing interface java.sql.Connection
2017-07-11 09:56:34  [ main:4540 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.Connection
2017-07-11 09:56:34  [ main:4541 ] - [ DEBUG ]  Implementing interface java.lang.AutoCloseable
2017-07-11 09:56:34  [ main:4542 ] - [ DEBUG ]  Implementing interface java.io.Serializable
2017-07-11 09:56:34  [ main:4542 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.ConnectionProperties
2017-07-11 09:56:34  [ main:5276 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 09:56:34  [ main:5277 ] - [ DEBUG ]  Implementing interface java.sql.DatabaseMetaData
2017-07-11 09:56:35  [ main:5559 ] - [ DEBUG ]  Parsed mapper file: 'file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\mapper\UserMapper.xml]'
2017-07-11 09:56:35  [ main:5685 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:56:35  [ main:5848 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:56:35  [ main:5917 ] - [ WARN ]  Exception encountered during context initialization - cancelling refresh attempt
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'com.openhr.pm.service.UserService': Cannot resolve reference to bean 'dubbo' while setting bean property 'protocols' with key [1]; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'dubbo' is defined
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveManagedList(BeanDefinitionValueResolver.java:382)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:157)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1469)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:537)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)
	at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:139)
	at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:93)
	at com.openhr.test.Provider.main(Provider.java:9)
Caused by: org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'dubbo' is defined
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:687)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1168)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:281)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)
	at org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)
	... 17 more
2017-07-11 09:56:35  [ DubboShutdownHook:5974 ] - [ INFO ]   [DUBBO] Run shutdown hook now., dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:56:35  [ ShutdownHook:5977 ] - [ DEBUG ]  Running ShutdownHook
2017-07-11 09:56:35  [ Shutdown Hook:5980 ] - [ INFO ]  Shutting down 'null' pool immediately [Shutdown Hook]
2017-07-11 09:56:35  [ DubboShutdownHook:5983 ] - [ INFO ]   [DUBBO] Close all registries [], dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:56:35  [ Shutdown Hook:5987 ] - [ DEBUG ]  000001 (00/01/00) - #0001 removed because of shutdown.
2017-07-11 09:56:35  [ Shutdown Hook:5988 ] - [ DEBUG ]  Connection #1 closed
2017-07-11 09:56:35  [ Shutdown Hook:5989 ] - [ DEBUG ]  000001 (00/00/00) - #0002 removed because of shutdown.
2017-07-11 09:56:35  [ Shutdown Hook:5990 ] - [ DEBUG ]  Connection #2 closed
2017-07-11 09:56:35  [ Shutdown Hook:5990 ] - [ INFO ]  'null' pool has been closed down by Shutdown Hook in 10 milliseconds.
2017-07-11 09:56:35  [ Shutdown Hook:5991 ] - [ INFO ]  Stopping Prototyper thread
2017-07-11 09:56:35  [ Shutdown Hook:5991 ] - [ INFO ]  Stopping HouseKeeper thread
2017-07-11 09:59:22  [ main:0 ] - [ INFO ]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2017-07-11 09:59:22  [ main:234 ] - [ DEBUG ]  Identified candidate component class: file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\com\openhr\pm\mapper\UserMapper.class]
2017-07-11 09:59:22  [ main:235 ] - [ DEBUG ]  Creating MapperFactoryBean with name 'userMapper' and 'com.openhr.pm.mapper.UserMapper' mapperInterface
2017-07-11 09:59:22  [ main:238 ] - [ DEBUG ]  Enabling autowire by type for MapperFactoryBean with name 'userMapper'.
2017-07-11 09:59:26  [ main:4103 ] - [ DEBUG ]  Logging initialized using 'class org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2017-07-11 09:59:26  [ main:4255 ] - [ DEBUG ]  Parsed configuration file: 'class path resource [mybatis/mybatis-config.xml]'
2017-07-11 09:59:26  [ main:4293 ] - [ DEBUG ]  Registered shutdownHook
2017-07-11 09:59:26  [ main:4297 ] - [ DEBUG ]  Registering 'null' house keeper
2017-07-11 09:59:26  [ main:4299 ] - [ DEBUG ]  Starting a house keeper thread
2017-07-11 09:59:27  [ Prototyper:4616 ] - [ DEBUG ]  Remembering default value: getTransactionIsolation() = 4
2017-07-11 09:59:27  [ Prototyper:4617 ] - [ DEBUG ]  Remembering default value: getHoldability() = 2
2017-07-11 09:59:27  [ Prototyper:4617 ] - [ DEBUG ]  Remembering default value: getCatalog() = zhrclound
2017-07-11 09:59:27  [ Prototyper:4618 ] - [ DEBUG ]  Remembering default value: isReadOnly() = false
2017-07-11 09:59:27  [ Prototyper:4618 ] - [ DEBUG ]  Remembering default value: getTypeMap() = {}
2017-07-11 09:59:27  [ Prototyper:4619 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 09:59:27  [ main:4619 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 09:59:27  [ main:4621 ] - [ DEBUG ]  000000 (01/02/00) - Connection #1 created on demand = ACTIVE
2017-07-11 09:59:27  [ Prototyper:4621 ] - [ DEBUG ]  000000 (01/02/00) - Connection #2 created to achieve minimum of 2 = AVAILABLE
2017-07-11 09:59:27  [ main:4704 ] - [ DEBUG ]  Implementing interface java.lang.AutoCloseable
2017-07-11 09:59:27  [ main:4705 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 09:59:27  [ main:4706 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.Connection
2017-07-11 09:59:27  [ main:4707 ] - [ DEBUG ]  Implementing interface java.sql.Connection
2017-07-11 09:59:27  [ main:4708 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.MySQLConnection
2017-07-11 09:59:27  [ main:4708 ] - [ DEBUG ]  Implementing interface java.io.Serializable
2017-07-11 09:59:27  [ main:4709 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.ConnectionProperties
2017-07-11 09:59:28  [ main:5430 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 09:59:28  [ main:5432 ] - [ DEBUG ]  Implementing interface java.sql.DatabaseMetaData
2017-07-11 09:59:28  [ main:5713 ] - [ DEBUG ]  Parsed mapper file: 'file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\mapper\UserMapper.xml]'
2017-07-11 09:59:28  [ main:5843 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:28  [ main:6012 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:28  [ main:6132 ] - [ INFO ]   [DUBBO] The service ready on spring started. service: com.openhr.pm.service.UserService, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:28  [ main:6283 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.remoting.http;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class HttpBinder$Adpative implements com.alibaba.dubbo.remoting.http.HttpBinder {
public com.alibaba.dubbo.remoting.http.HttpServer bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.http.HttpHandler arg1) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", "jetty");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.http.HttpBinder) name from url(" + url.toString() + ") use keys([server])");
com.alibaba.dubbo.remoting.http.HttpBinder extension = (com.alibaba.dubbo.remoting.http.HttpBinder)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.http.HttpBinder.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:29  [ main:6403 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:29  [ main:6420 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:29  [ main:6437 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:29  [ main:6457 ] - [ INFO ]   [DUBBO] Export dubbo service com.openhr.pm.service.UserService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:29  [ main:6457 ] - [ INFO ]   [DUBBO] Export dubbo service com.openhr.pm.service.UserService to url rest://169.254.90.239:8888/hr-permission-service/com.openhr.pm.service.UserService?accepts=500&anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=548&server=tomcat&side=provider&threads=500&timestamp=1499738368919, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:29  [ main:6458 ] - [ INFO ]   [DUBBO] Register dubbo service com.openhr.pm.service.UserService url rest://169.254.90.239:8888/hr-permission-service/com.openhr.pm.service.UserService?accepts=500&anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=548&server=tomcat&side=provider&threads=500&timestamp=1499738368919 to registry registry://192.168.1.151:2181/com.alibaba.dubbo.registry.RegistryService?application=hr-permission-service&backup=192.168.1.152:2181,192.168.1.153:2181&dubbo=2.8.4&organization=dubbox&owner=programmer&pid=548&registry=zookeeper&timestamp=1499738368795, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:29  [ main:6462 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:29  [ main:6479 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:32  [ ShutdownHook:9653 ] - [ DEBUG ]  Running ShutdownHook
2017-07-11 09:59:32  [ DubboShutdownHook:9653 ] - [ INFO ]   [DUBBO] Run shutdown hook now., dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:32  [ Shutdown Hook:9654 ] - [ INFO ]  Shutting down 'null' pool immediately [Shutdown Hook]
2017-07-11 09:59:32  [ DubboShutdownHook:9655 ] - [ INFO ]   [DUBBO] Close all registries [], dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:32  [ DubboShutdownHook:9656 ] - [ INFO ]   [DUBBO] Unexport service: injvm://127.0.0.1/hr-permission-service/com.openhr.pm.service.UserService?accepts=500&anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=548&server=tomcat&side=provider&threads=500&timestamp=1499738368919, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:32  [ DubboShutdownHook:9656 ] - [ INFO ]   [DUBBO] Closing the rest server at 169.254.90.239:8888, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 09:59:32  [ Shutdown Hook:9658 ] - [ DEBUG ]  000001 (00/01/00) - #0002 removed because of shutdown.
2017-07-11 09:59:32  [ Shutdown Hook:9658 ] - [ DEBUG ]  Connection #2 closed
2017-07-11 09:59:32  [ Shutdown Hook:9659 ] - [ DEBUG ]  000001 (00/00/00) - #0001 removed because of shutdown.
2017-07-11 09:59:32  [ Shutdown Hook:9659 ] - [ DEBUG ]  Connection #1 closed
2017-07-11 09:59:32  [ Shutdown Hook:9660 ] - [ INFO ]  'null' pool has been closed down by Shutdown Hook in 6 milliseconds.
2017-07-11 09:59:32  [ Shutdown Hook:9660 ] - [ INFO ]  Stopping Prototyper thread
2017-07-11 09:59:32  [ Shutdown Hook:9661 ] - [ INFO ]  Stopping HouseKeeper thread
2017-07-11 09:59:32  [ DubboShutdownHook:9725 ] - [ INFO ]   [DUBBO] Closing rest clients, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:04  [ main:1 ] - [ INFO ]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2017-07-11 10:07:04  [ main:326 ] - [ DEBUG ]  Identified candidate component class: file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\com\openhr\pm\mapper\UserMapper.class]
2017-07-11 10:07:04  [ main:327 ] - [ DEBUG ]  Creating MapperFactoryBean with name 'userMapper' and 'com.openhr.pm.mapper.UserMapper' mapperInterface
2017-07-11 10:07:04  [ main:329 ] - [ DEBUG ]  Enabling autowire by type for MapperFactoryBean with name 'userMapper'.
2017-07-11 10:07:08  [ main:4145 ] - [ DEBUG ]  Logging initialized using 'class org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2017-07-11 10:07:08  [ main:4342 ] - [ DEBUG ]  Parsed configuration file: 'class path resource [mybatis/mybatis-config.xml]'
2017-07-11 10:07:08  [ main:4381 ] - [ DEBUG ]  Registered shutdownHook
2017-07-11 10:07:08  [ main:4385 ] - [ DEBUG ]  Registering 'null' house keeper
2017-07-11 10:07:08  [ main:4389 ] - [ DEBUG ]  Starting a house keeper thread
2017-07-11 10:07:08  [ main:4702 ] - [ DEBUG ]  Remembering default value: getTransactionIsolation() = 4
2017-07-11 10:07:08  [ main:4704 ] - [ DEBUG ]  Remembering default value: getHoldability() = 2
2017-07-11 10:07:08  [ main:4704 ] - [ DEBUG ]  Remembering default value: getCatalog() = zhrclound
2017-07-11 10:07:08  [ main:4706 ] - [ DEBUG ]  Remembering default value: isReadOnly() = false
2017-07-11 10:07:08  [ main:4706 ] - [ DEBUG ]  Remembering default value: getTypeMap() = {}
2017-07-11 10:07:08  [ main:4707 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 10:07:08  [ Prototyper:4707 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 10:07:08  [ main:4710 ] - [ DEBUG ]  000000 (01/02/00) - Connection #1 created on demand = ACTIVE
2017-07-11 10:07:08  [ Prototyper:4710 ] - [ DEBUG ]  000000 (01/02/00) - Connection #2 created to achieve minimum of 2 = AVAILABLE
2017-07-11 10:07:08  [ main:4776 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.MySQLConnection
2017-07-11 10:07:08  [ main:4777 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.Connection
2017-07-11 10:07:08  [ main:4777 ] - [ DEBUG ]  Implementing interface java.sql.Connection
2017-07-11 10:07:08  [ main:4778 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.ConnectionProperties
2017-07-11 10:07:08  [ main:4779 ] - [ DEBUG ]  Implementing interface java.io.Serializable
2017-07-11 10:07:08  [ main:4779 ] - [ DEBUG ]  Implementing interface java.lang.AutoCloseable
2017-07-11 10:07:08  [ main:4780 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 10:07:09  [ main:5501 ] - [ DEBUG ]  Implementing interface java.sql.DatabaseMetaData
2017-07-11 10:07:09  [ main:5502 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 10:07:09  [ main:5773 ] - [ DEBUG ]  Parsed mapper file: 'file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\mapper\UserMapper.xml]'
2017-07-11 10:07:10  [ main:5848 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6037 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6145 ] - [ INFO ]   [DUBBO] The service ready on spring started. service: com.openhr.pm.service.UserService, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6319 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6347 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6364 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6381 ] - [ INFO ]   [DUBBO] Export dubbo service com.openhr.pm.service.UserService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6382 ] - [ INFO ]   [DUBBO] Export dubbo service com.openhr.pm.service.UserService to url dubbo://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6382 ] - [ INFO ]   [DUBBO] Register dubbo service com.openhr.pm.service.UserService url dubbo://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386 to registry registry://192.168.1.151:2181/com.alibaba.dubbo.registry.RegistryService?application=hr-permission-service&backup=192.168.1.152:2181,192.168.1.153:2181&dubbo=2.8.4&organization=dubbox&owner=programmer&pid=3656&registry=zookeeper&timestamp=1499738830328, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6393 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6413 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6444 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6736 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:10  [ main:6761 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:11  [ main:7001 ] - [ DEBUG ]   [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:11  [ main:7103 ] - [ INFO ]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /169.254.90.239:20880, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:11  [ main:7113 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:11  [ main:7238 ] - [ DEBUG ]  Creating new ZookKeeper instance to connect to 192.168.1.151:2181,192.168.1.152:2181,192.168.1.153:2181.
2017-07-11 10:07:11  [ ZkClient-EventThread-17-192.168.1.151:2181,192.168.1.152:2181,192.168.1.153:2181:7238 ] - [ INFO ]  Starting ZkClient event thread.
2017-07-11 10:07:11  [ main:7320 ] - [ INFO ]  Client environment:zookeeper.version=3.4.5-1392090, built on 09/30/2012 17:52 GMT
2017-07-11 10:07:11  [ main:7320 ] - [ INFO ]  Client environment:host.name=GZH-20140819YRW
2017-07-11 10:07:11  [ main:7320 ] - [ INFO ]  Client environment:java.version=1.7.0_13
2017-07-11 10:07:11  [ main:7321 ] - [ INFO ]  Client environment:java.vendor=Oracle Corporation
2017-07-11 10:07:11  [ main:7321 ] - [ INFO ]  Client environment:java.home=D:\Program Files (x86)\Java\jdk_1.7.0\jre
2017-07-11 10:07:11  [ main:7322 ] - [ INFO ]  Client environment:java.class.path=D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\test-classes;D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes;D:\workspace\githubwork\kikihr\hr-parent\hr-permission-facade\target\classes;I:\localRepository\junit\junit\4.11\junit-4.11.jar;I:\localRepository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;I:\localRepository\org\springframework\spring-test\4.1.5.RELEASE\spring-test-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-core\4.1.5.RELEASE\spring-core-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-webmvc\4.1.5.RELEASE\spring-webmvc-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-beans\4.1.5.RELEASE\spring-beans-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-context\4.1.5.RELEASE\spring-context-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-expression\4.1.5.RELEASE\spring-expression-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-web\4.1.5.RELEASE\spring-web-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-jdbc\4.1.5.RELEASE\spring-jdbc-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-tx\4.1.5.RELEASE\spring-tx-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-orm\4.1.5.RELEASE\spring-orm-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-aop\4.1.5.RELEASE\spring-aop-4.1.5.RELEASE.jar;I:\localRepository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;I:\localRepository\org\springframework\spring-aspects\4.1.5.RELEASE\spring-aspects-4.1.5.RELEASE.jar;I:\localRepository\org\aspectj\aspectjweaver\1.8.5\aspectjweaver-1.8.5.jar;I:\localRepository\com\cloudhopper\proxool\proxool\0.9.1\proxool-0.9.1.jar;I:\localRepository\com\cloudhopper\proxool\proxool-cglib\0.9.1\proxool-cglib-0.9.1.jar;I:\localRepository\avalon-framework\avalon-framework-api\4.3\avalon-framework-api-4.3.jar;I:\localRepository\avalon-logkit\avalon-logkit\2.1\avalon-logkit-2.1.jar;I:\localRepository\geronimo-spec\geronimo-spec-javamail\1.3.1-rc3\geronimo-spec-javamail-1.3.1-rc3.jar;I:\localRepository\geronimo-spec\geronimo-spec-jms\1.1-rc4\geronimo-spec-jms-1.1-rc4.jar;I:\localRepository\commons-fileupload\commons-fileupload\1.2.2\commons-fileupload-1.2.2.jar;I:\localRepository\org\apache\commons\commons-lang3\3.3.1\commons-lang3-3.3.1.jar;I:\localRepository\commons-io\commons-io\2.4\commons-io-2.4.jar;I:\localRepository\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;I:\localRepository\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;I:\localRepository\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;I:\localRepository\commons-codec\commons-codec\1.6\commons-codec-1.6.jar;I:\localRepository\org\codehaus\jackson\jackson-mapper-asl\1.9.11\jackson-mapper-asl-1.9.11.jar;I:\localRepository\org\codehaus\jackson\jackson-core-asl\1.9.11\jackson-core-asl-1.9.11.jar;I:\localRepository\com\alibaba\fastjson\1.1.26\fastjson-1.1.26.jar;I:\localRepository\org\slf4j\slf4j-api\1.7.6\slf4j-api-1.7.6.jar;I:\localRepository\org\slf4j\jul-to-slf4j\1.7.6\jul-to-slf4j-1.7.6.jar;I:\localRepository\org\slf4j\jcl-over-slf4j\1.7.6\jcl-over-slf4j-1.7.6.jar;I:\localRepository\log4j\log4j\1.2.15\log4j-1.2.15.jar;I:\localRepository\javax\mail\mail\1.4\mail-1.4.jar;I:\localRepository\javax\servlet\jstl\1.2\jstl-1.2.jar;I:\localRepository\javax\servlet\servlet-api\3.0-alpha-1\servlet-api-3.0-alpha-1.jar;I:\localRepository\com\alibaba\rocketmq\rocketmq-client\3.2.6\rocketmq-client-3.2.6.jar;I:\localRepository\com\alibaba\rocketmq\rocketmq-common\3.2.6\rocketmq-common-3.2.6.jar;I:\localRepository\com\alibaba\rocketmq\rocketmq-remoting\3.2.6\rocketmq-remoting-3.2.6.jar;I:\localRepository\io\netty\netty-all\4.0.25.Final\netty-all-4.0.25.Final.jar;I:\localRepository\org\apache\httpcomponents\httpclient-cache\4.3.1\httpclient-cache-4.3.1.jar;I:\localRepository\org\apache\httpcomponents\httpclient\4.3.1\httpclient-4.3.1.jar;I:\localRepository\org\apache\httpcomponents\httpcore\4.3.1\httpcore-4.3.1.jar;I:\localRepository\org\apache\zookeeper\zookeeper\3.4.5\zookeeper-3.4.5.jar;I:\localRepository\org\slf4j\slf4j-log4j12\1.6.1\slf4j-log4j12-1.6.1.jar;I:\localRepository\jline\jline\0.9.94\jline-0.9.94.jar;I:\localRepository\org\jboss\netty\netty\3.2.2.Final\netty-3.2.2.Final.jar;I:\localRepository\com\101tec\zkclient\0.7\zkclient-0.7.jar;I:\localRepository\org\apache\curator\curator-framework\2.5.0\curator-framework-2.5.0.jar;I:\localRepository\org\apache\curator\curator-client\2.5.0\curator-client-2.5.0.jar;I:\localRepository\com\google\guava\guava\16.0.1\guava-16.0.1.jar;I:\localRepository\org\apache\curator\curator-recipes\2.4.2\curator-recipes-2.4.2.jar;I:\localRepository\redis\clients\jedis\2.7.2\jedis-2.7.2.jar;I:\localRepository\org\apache\commons\commons-pool2\2.3\commons-pool2-2.3.jar;I:\localRepository\com\alibaba\dubbo\2.8.4\dubbo-2.8.4.jar;I:\localRepository\org\apache\tomcat\embed\tomcat-embed-core\8.0.11\tomcat-embed-core-8.0.11.jar;I:\localRepository\org\apache\tomcat\embed\tomcat-embed-logging-juli\8.0.11\tomcat-embed-logging-juli-8.0.11.jar;I:\localRepository\org\javassist\javassist\3.15.0-GA\javassist-3.15.0-GA.jar;I:\localRepository\org\apache\mina\mina-core\1.1.7\mina-core-1.1.7.jar;I:\localRepository\org\glassfish\grizzly\grizzly-core\2.1.4\grizzly-core-2.1.4.jar;I:\localRepository\org\glassfish\grizzly\grizzly-framework\2.1.4\grizzly-framework-2.1.4.jar;I:\localRepository\org\glassfish\gmbal\gmbal-api-only\3.0.0-b023\gmbal-api-only-3.0.0-b023.jar;I:\localRepository\org\glassfish\external\management-api\3.0.0-b012\management-api-3.0.0-b012.jar;I:\localRepository\org\glassfish\grizzly\grizzly-portunif\2.1.4\grizzly-portunif-2.1.4.jar;I:\localRepository\org\glassfish\grizzly\grizzly-rcm\2.1.4\grizzly-rcm-2.1.4.jar;I:\localRepository\com\thoughtworks\xstream\xstream\1.4.1\xstream-1.4.1.jar;I:\localRepository\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;I:\localRepository\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;I:\localRepository\org\apache\bsf\bsf-api\3.1\bsf-api-3.1.jar;I:\localRepository\com\googlecode\xmemcached\xmemcached\1.3.6\xmemcached-1.3.6.jar;I:\localRepository\org\apache\cxf\cxf-rt-frontend-simple\2.6.1\cxf-rt-frontend-simple-2.6.1.jar;I:\localRepository\org\apache\cxf\cxf-api\2.6.1\cxf-api-2.6.1.jar;I:\localRepository\org\codehaus\woodstox\woodstox-core-asl\4.1.2\woodstox-core-asl-4.1.2.jar;I:\localRepository\org\codehaus\woodstox\stax2-api\3.1.1\stax2-api-3.1.1.jar;I:\localRepository\org\apache\ws\xmlschema\xmlschema-core\2.0.2\xmlschema-core-2.0.2.jar;I:\localRepository\org\apache\geronimo\specs\geronimo-javamail_1.4_spec\1.7.1\geronimo-javamail_1.4_spec-1.7.1.jar;I:\localRepository\wsdl4j\wsdl4j\1.6.2\wsdl4j-1.6.2.jar;I:\localRepository\org\apache\cxf\cxf-rt-core\2.6.1\cxf-rt-core-2.6.1.jar;I:\localRepository\org\apache\cxf\cxf-rt-bindings-soap\2.6.1\cxf-rt-bindings-soap-2.6.1.jar;I:\localRepository\org\apache\cxf\cxf-rt-databinding-jaxb\2.6.1\cxf-rt-databinding-jaxb-2.6.1.jar;I:\localRepository\org\apache\cxf\cxf-rt-transports-http\2.6.1\cxf-rt-transports-http-2.6.1.jar;I:\localRepository\org\apache\thrift\libthrift\0.8.0\libthrift-0.8.0.jar;I:\localRepository\commons-lang\commons-lang\2.5\commons-lang-2.5.jar;I:\localRepository\com\caucho\hessian\4.0.7\hessian-4.0.7.jar;I:\localRepository\org\mortbay\jetty\jetty\6.1.26\jetty-6.1.26.jar;I:\localRepository\org\mortbay\jetty\jetty-util\6.1.26\jetty-util-6.1.26.jar;I:\localRepository\javax\validation\validation-api\1.0.0.GA\validation-api-1.0.0.GA.jar;I:\localRepository\org\hibernate\hibernate-validator\4.2.0.Final\hibernate-validator-4.2.0.Final.jar;I:\localRepository\javax\cache\cache-api\0.4\cache-api-0.4.jar;I:\localRepository\javax\ws\rs\javax.ws.rs-api\2.0\javax.ws.rs-api-2.0.jar;I:\localRepository\org\jboss\resteasy\resteasy-jaxrs\3.0.7.Final\resteasy-jaxrs-3.0.7.Final.jar;I:\localRepository\org\jboss\resteasy\jaxrs-api\3.0.7.Final\jaxrs-api-3.0.7.Final.jar;I:\localRepository\org\jboss\spec\javax\annotation\jboss-annotations-api_1.1_spec\1.0.1.Final\jboss-annotations-api_1.1_spec-1.0.1.Final.jar;I:\localRepository\javax\activation\activation\1.1\activation-1.1.jar;I:\localRepository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar;I:\localRepository\org\jboss\resteasy\resteasy-client\3.0.7.Final\resteasy-client-3.0.7.Final.jar;I:\localRepository\org\jboss\resteasy\resteasy-netty\3.0.7.Final\resteasy-netty-3.0.7.Final.jar;I:\localRepository\io\netty\netty\3.6.4.Final\netty-3.6.4.Final.jar;I:\localRepository\org\jboss\resteasy\resteasy-jdk-http\3.0.7.Final\resteasy-jdk-http-3.0.7.Final.jar;I:\localRepository\org\jboss\resteasy\resteasy-jackson-provider\3.0.7.Final\resteasy-jackson-provider-3.0.7.Final.jar;I:\localRepository\org\codehaus\jackson\jackson-jaxrs\1.9.12\jackson-jaxrs-1.9.12.jar;I:\localRepository\org\codehaus\jackson\jackson-xc\1.9.12\jackson-xc-1.9.12.jar;I:\localRepository\org\jboss\resteasy\resteasy-jaxb-provider\3.0.7.Final\resteasy-jaxb-provider-3.0.7.Final.jar;I:\localRepository\com\sun\xml\bind\jaxb-impl\2.2.7\jaxb-impl-2.2.7.jar;I:\localRepository\com\sun\xml\bind\jaxb-core\2.2.7\jaxb-core-2.2.7.jar;I:\localRepository\javax\xml\bind\jaxb-api\2.2.7\jaxb-api-2.2.7.jar;I:\localRepository\com\sun\istack\istack-commons-runtime\2.16\istack-commons-runtime-2.16.jar;I:\localRepository\com\sun\xml\fastinfoset\FastInfoset\1.2.12\FastInfoset-1.2.12.jar;I:\localRepository\javax\xml\bind\jsr173_api\1.0\jsr173_api-1.0.jar;I:\localRepository\com\esotericsoftware\kryo\kryo\2.24.0\kryo-2.24.0.jar;I:\localRepository\com\esotericsoftware\minlog\minlog\1.2\minlog-1.2.jar;I:\localRepository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;I:\localRepository\de\javakaffee\kryo-serializers\0.26\kryo-serializers-0.26.jar;I:\localRepository\de\ruedigermoeller\fst\1.55\fst-1.55.jar;I:\localRepository\org\jasig\cas\client\cas-client-core\3.1.12\cas-client-core-3.1.12.jar;I:\localRepository\org\mybatis\mybatis\3.2.1\mybatis-3.2.1.jar;I:\localRepository\org\mybatis\mybatis-spring\1.2.0\mybatis-spring-1.2.0.jar;I:\localRepository\com\github\pagehelper\pagehelper\4.0.0\pagehelper-4.0.0.jar;I:\localRepository\com\github\jsqlparser\jsqlparser\0.9.1\jsqlparser-0.9.1.jar;I:\localRepository\mysql\mysql-connector-java\5.1.29\mysql-connector-java-5.1.29.jar
2017-07-11 10:07:11  [ main:7322 ] - [ INFO ]  Client environment:java.library.path=D:\Program Files (x86)\Java\jdk_1.7.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\ProgramData\Oracle\Java\javapath;C:\Program Files (x86)\AMD APP\bin\x86_64;C:\Program Files (x86)\AMD APP\bin\x86;H:\oracle\app\oracle\product\11.2.0\server\bin;D:\Program Files (x86)\Java\jdk_1.7.0\bin;D:\Program Files (x86)\Java\jdk_1.7.0\jre\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;D:\Program Files (x86)\Java\apache-maven-3.3.9\bin;D:\Program Files\nodejs\;D:\Program Files\ATI Technologies\ATI.ACE\Core-Static;D:\Program Files\tortoisegit\bin;C:\Users\Administrator\AppData\Roaming\npm;.
2017-07-11 10:07:11  [ main:7323 ] - [ INFO ]  Client environment:java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\
2017-07-11 10:07:11  [ main:7323 ] - [ INFO ]  Client environment:java.compiler=<NA>
2017-07-11 10:07:11  [ main:7323 ] - [ INFO ]  Client environment:os.name=Windows 7
2017-07-11 10:07:11  [ main:7324 ] - [ INFO ]  Client environment:os.arch=amd64
2017-07-11 10:07:11  [ main:7324 ] - [ INFO ]  Client environment:os.version=6.1
2017-07-11 10:07:11  [ main:7324 ] - [ INFO ]  Client environment:user.name=Administrator
2017-07-11 10:07:11  [ main:7325 ] - [ INFO ]  Client environment:user.home=D:\我的文档
2017-07-11 10:07:11  [ main:7325 ] - [ INFO ]  Client environment:user.dir=D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service
2017-07-11 10:07:11  [ main:7327 ] - [ INFO ]  Initiating client connection, connectString=192.168.1.151:2181,192.168.1.152:2181,192.168.1.153:2181 sessionTimeout=60000 watcher=org.I0Itec.zkclient.ZkClient@7e6d99a4
2017-07-11 10:07:11  [ main:7353 ] - [ DEBUG ]  zookeeper.disableAutoWatchReset is false
2017-07-11 10:07:11  [ main:7372 ] - [ DEBUG ]  Awaiting connection to Zookeeper server
2017-07-11 10:07:11  [ main:7373 ] - [ INFO ]  Waiting for keeper state SyncConnected
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):9941 ] - [ INFO ]  Opening socket connection to server 192.168.1.153/192.168.1.153:2181. Will not attempt to authenticate using SASL (unknown error)
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):9944 ] - [ INFO ]  Socket connection established to 192.168.1.153/192.168.1.153:2181, initiating session
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):9947 ] - [ DEBUG ]  Session establishment request sent on 192.168.1.153/192.168.1.153:2181
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):10016 ] - [ INFO ]  Session establishment complete on server 192.168.1.153/192.168.1.153:2181, sessionid = 0x25d290d51cb0000, negotiated timeout = 40000
2017-07-11 10:07:14  [ main-EventThread:10019 ] - [ DEBUG ]  Received event: WatchedEvent state:SyncConnected type:None path:null
2017-07-11 10:07:14  [ main-EventThread:10020 ] - [ INFO ]  zookeeper state changed (SyncConnected)
2017-07-11 10:07:14  [ main-EventThread:10020 ] - [ DEBUG ]  Leaving process event
2017-07-11 10:07:14  [ main:10020 ] - [ DEBUG ]  State is SyncConnected
2017-07-11 10:07:14  [ main:10023 ] - [ INFO ]   [DUBBO] Register: dubbo://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):10071 ] - [ DEBUG ]  Reading reply sessionid:0x25d290d51cb0000, packet:: clientPath:null serverPath:null finished:false header:: 1,1  replyHeader:: 1,8589934597,0  request:: '/dubbo,,v{s{31,s{'world,'anyone}}},0  response:: '/dubbo 
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):10081 ] - [ DEBUG ]  Reading reply sessionid:0x25d290d51cb0000, packet:: clientPath:null serverPath:null finished:false header:: 2,1  replyHeader:: 2,8589934598,0  request:: '/dubbo/com.openhr.pm.service.UserService,,v{s{31,s{'world,'anyone}}},0  response:: '/dubbo/com.openhr.pm.service.UserService 
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):10091 ] - [ DEBUG ]  Reading reply sessionid:0x25d290d51cb0000, packet:: clientPath:null serverPath:null finished:false header:: 3,1  replyHeader:: 3,8589934599,0  request:: '/dubbo/com.openhr.pm.service.UserService/providers,,v{s{31,s{'world,'anyone}}},0  response:: '/dubbo/com.openhr.pm.service.UserService/providers 
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):10103 ] - [ DEBUG ]  Reading reply sessionid:0x25d290d51cb0000, packet:: clientPath:null serverPath:null finished:false header:: 4,1  replyHeader:: 4,8589934600,0  request:: '/dubbo/com.openhr.pm.service.UserService/providers/dubbo%253A%252F%252F169.254.90.239%253A20880%252Fcom.openhr.pm.service.UserService%253Fanyhost%253Dtrue%2526application%253Dhr-permission-service%2526dubbo%253D2.8.4%2526generic%253Dfalse%2526interface%253Dcom.openhr.pm.service.UserService%2526methods%253Dtestget%252CselectUserById%252CqueryByPage%252CaddNew%2526organization%253Ddubbox%2526owner%253Dprogrammer%2526pid%253D3656%2526side%253Dprovider%2526timestamp%253D1499738830386,,v{s{31,s{'world,'anyone}}},1  response:: '/dubbo/com.openhr.pm.service.UserService/providers/dubbo%253A%252F%252F169.254.90.239%253A20880%252Fcom.openhr.pm.service.UserService%253Fanyhost%253Dtrue%2526application%253Dhr-permission-service%2526dubbo%253D2.8.4%2526generic%253Dfalse%2526interface%253Dcom.openhr.pm.service.UserService%2526methods%253Dtestget%252CselectUserById%252CqueryByPage%252CaddNew%2526organization%253Ddubbox%2526owner%253Dprogrammer%2526pid%253D3656%2526side%253Dprovider%2526timestamp%253D1499738830386 
2017-07-11 10:07:14  [ main:10122 ] - [ INFO ]   [DUBBO] Subscribe: provider://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):10141 ] - [ DEBUG ]  Reading reply sessionid:0x25d290d51cb0000, packet:: clientPath:null serverPath:null finished:false header:: 5,1  replyHeader:: 5,8589934601,-110  request:: '/dubbo,,v{s{31,s{'world,'anyone}}},0  response::  
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):10159 ] - [ DEBUG ]  Reading reply sessionid:0x25d290d51cb0000, packet:: clientPath:null serverPath:null finished:false header:: 6,1  replyHeader:: 6,8589934602,-110  request:: '/dubbo/com.openhr.pm.service.UserService,,v{s{31,s{'world,'anyone}}},0  response::  
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):10169 ] - [ DEBUG ]  Reading reply sessionid:0x25d290d51cb0000, packet:: clientPath:null serverPath:null finished:false header:: 7,1  replyHeader:: 7,8589934603,0  request:: '/dubbo/com.openhr.pm.service.UserService/configurators,,v{s{31,s{'world,'anyone}}},0  response:: '/dubbo/com.openhr.pm.service.UserService/configurators 
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):10193 ] - [ DEBUG ]  Reading reply sessionid:0x25d290d51cb0000, packet:: clientPath:null serverPath:null finished:false header:: 8,3  replyHeader:: 8,8589934603,0  request:: '/dubbo/com.openhr.pm.service.UserService/configurators,T  response:: s{8589934603,8589934603,1499634795131,1499634795131,0,0,0,0,0,0,8589934603} 
2017-07-11 10:07:14  [ main-SendThread(192.168.1.153:2181):10202 ] - [ DEBUG ]  Reading reply sessionid:0x25d290d51cb0000, packet:: clientPath:null serverPath:null finished:false header:: 9,8  replyHeader:: 9,8589934603,0  request:: '/dubbo/com.openhr.pm.service.UserService/configurators,T  response:: v{} 
2017-07-11 10:07:14  [ main:10202 ] - [ INFO ]   [DUBBO] Notify urls for subscribe url provider://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386, urls: [empty://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386], dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:14  [ main:10213 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:14  [ main:10232 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:07:27  [ main-SendThread(192.168.1.153:2181):23534 ] - [ DEBUG ]  Got ping response for sessionid: 0x25d290d51cb0000 after 2ms
2017-07-11 10:07:41  [ main-SendThread(192.168.1.153:2181):36870 ] - [ DEBUG ]  Got ping response for sessionid: 0x25d290d51cb0000 after 2ms
2017-07-11 10:07:54  [ main-SendThread(192.168.1.153:2181):50203 ] - [ DEBUG ]  Got ping response for sessionid: 0x25d290d51cb0000 after 1ms
2017-07-11 10:08:07  [ main-SendThread(192.168.1.153:2181):63538 ] - [ DEBUG ]  Got ping response for sessionid: 0x25d290d51cb0000 after 2ms
2017-07-11 10:08:21  [ main-SendThread(192.168.1.153:2181):76871 ] - [ DEBUG ]  Got ping response for sessionid: 0x25d290d51cb0000 after 1ms
2017-07-11 10:08:34  [ main-SendThread(192.168.1.153:2181):90204 ] - [ DEBUG ]  Got ping response for sessionid: 0x25d290d51cb0000 after 1ms
2017-07-11 10:08:47  [ main-SendThread(192.168.1.153:2181):103539 ] - [ DEBUG ]  Got ping response for sessionid: 0x25d290d51cb0000 after 1ms
2017-07-11 10:08:53  [ DubboShutdownHook:109795 ] - [ INFO ]   [DUBBO] Run shutdown hook now., dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:08:53  [ ShutdownHook:109796 ] - [ DEBUG ]  Running ShutdownHook
2017-07-11 10:08:53  [ DubboShutdownHook:109798 ] - [ INFO ]   [DUBBO] Close all registries [zookeeper://192.168.1.151:2181/com.alibaba.dubbo.registry.RegistryService?application=hr-permission-service&backup=192.168.1.152:2181,192.168.1.153:2181&dubbo=2.8.4&interface=com.alibaba.dubbo.registry.RegistryService&organization=dubbox&owner=programmer&pid=3656&timestamp=1499738830328], dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:08:53  [ Shutdown Hook:109799 ] - [ INFO ]  Shutting down 'null' pool immediately [Shutdown Hook]
2017-07-11 10:08:53  [ DubboShutdownHook:109799 ] - [ INFO ]   [DUBBO] Destroy registry:zookeeper://192.168.1.151:2181/com.alibaba.dubbo.registry.RegistryService?application=hr-permission-service&backup=192.168.1.152:2181,192.168.1.153:2181&dubbo=2.8.4&interface=com.alibaba.dubbo.registry.RegistryService&organization=dubbox&owner=programmer&pid=3656&timestamp=1499738830328, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:08:53  [ DubboShutdownHook:109802 ] - [ INFO ]   [DUBBO] Unregister: dubbo://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:08:53  [ Shutdown Hook:109804 ] - [ DEBUG ]  000001 (00/01/00) - #0002 removed because of shutdown.
2017-07-11 10:08:53  [ Shutdown Hook:109804 ] - [ DEBUG ]  Connection #2 closed
2017-07-11 10:08:53  [ Shutdown Hook:109805 ] - [ DEBUG ]  000001 (00/00/00) - #0001 removed because of shutdown.
2017-07-11 10:08:53  [ Shutdown Hook:109806 ] - [ DEBUG ]  Connection #1 closed
2017-07-11 10:08:53  [ Shutdown Hook:109806 ] - [ INFO ]  'null' pool has been closed down by Shutdown Hook in 7 milliseconds.
2017-07-11 10:08:53  [ Shutdown Hook:109808 ] - [ INFO ]  Stopping Prototyper thread
2017-07-11 10:08:53  [ Shutdown Hook:109809 ] - [ INFO ]  Stopping HouseKeeper thread
2017-07-11 10:08:53  [ main-SendThread(192.168.1.153:2181):109819 ] - [ DEBUG ]  Reading reply sessionid:0x25d290d51cb0000, packet:: clientPath:null serverPath:null finished:false header:: 10,2  replyHeader:: 10,8589934604,0  request:: '/dubbo/com.openhr.pm.service.UserService/providers/dubbo%253A%252F%252F169.254.90.239%253A20880%252Fcom.openhr.pm.service.UserService%253Fanyhost%253Dtrue%2526application%253Dhr-permission-service%2526dubbo%253D2.8.4%2526generic%253Dfalse%2526interface%253Dcom.openhr.pm.service.UserService%2526methods%253Dtestget%252CselectUserById%252CqueryByPage%252CaddNew%2526organization%253Ddubbox%2526owner%253Dprogrammer%2526pid%253D3656%2526side%253Dprovider%2526timestamp%253D1499738830386,-1  response:: null
2017-07-11 10:08:53  [ DubboShutdownHook:109820 ] - [ INFO ]   [DUBBO] Destroy unregister url dubbo://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:08:53  [ DubboShutdownHook:109820 ] - [ INFO ]   [DUBBO] Unsubscribe: provider://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:08:53  [ DubboShutdownHook:109821 ] - [ INFO ]   [DUBBO] Destroy unsubscribe url provider://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:08:53  [ DubboShutdownHook:109821 ] - [ DEBUG ]  Closing ZkClient...
2017-07-11 10:08:53  [ ZkClient-EventThread-17-192.168.1.151:2181,192.168.1.152:2181,192.168.1.153:2181:109822 ] - [ INFO ]  Terminate ZkClient event thread.
2017-07-11 10:08:53  [ DubboShutdownHook:109823 ] - [ DEBUG ]  Closing ZooKeeper connected to 192.168.1.151:2181,192.168.1.152:2181,192.168.1.153:2181
2017-07-11 10:08:53  [ DubboShutdownHook:109823 ] - [ DEBUG ]  Closing session: 0x25d290d51cb0000
2017-07-11 10:08:53  [ DubboShutdownHook:109824 ] - [ DEBUG ]  Closing client for session: 0x25d290d51cb0000
2017-07-11 10:08:53  [ main-SendThread(192.168.1.153:2181):109831 ] - [ DEBUG ]  Reading reply sessionid:0x25d290d51cb0000, packet:: clientPath:null serverPath:null finished:false header:: 11,-11  replyHeader:: 11,8589934605,0  request:: null response:: null
2017-07-11 10:08:54  [ DubboShutdownHook:109832 ] - [ DEBUG ]  Disconnecting client for session: 0x25d290d51cb0000
2017-07-11 10:08:54  [ main-SendThread(192.168.1.153:2181):109832 ] - [ DEBUG ]  An exception was thrown while closing send thread for session 0x25d290d51cb0000 : Unable to read additional data from server sessionid 0x25d290d51cb0000, likely server has closed socket
2017-07-11 10:08:54  [ main-EventThread:109832 ] - [ INFO ]  EventThread shut down
2017-07-11 10:08:54  [ DubboShutdownHook:109832 ] - [ INFO ]  Session: 0x25d290d51cb0000 closed
2017-07-11 10:08:54  [ DubboShutdownHook:109833 ] - [ DEBUG ]  Closing ZkClient...done
2017-07-11 10:08:54  [ DubboShutdownHook:109834 ] - [ INFO ]   [DUBBO] Close dubbo server: /169.254.90.239:20880, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:08:54  [ DubboShutdownHook:109834 ] - [ INFO ]   [DUBBO] Close NettyServer bind /0.0.0.0:20880, export /169.254.90.239:20880, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:08:54  [ DubboShutdownHook:109870 ] - [ INFO ]   [DUBBO] Unexport service: dubbo://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:08:54  [ DubboShutdownHook:109871 ] - [ INFO ]   [DUBBO] Unexport service: injvm://127.0.0.1/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:25  [ main:0 ] - [ INFO ]  using logger: com.alibaba.dubbo.common.logger.log4j.Log4jLoggerAdapter
2017-07-11 10:51:25  [ main:292 ] - [ DEBUG ]  Identified candidate component class: file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\com\openhr\pm\mapper\UserMapper.class]
2017-07-11 10:51:25  [ main:293 ] - [ DEBUG ]  Creating MapperFactoryBean with name 'userMapper' and 'com.openhr.pm.mapper.UserMapper' mapperInterface
2017-07-11 10:51:25  [ main:295 ] - [ DEBUG ]  Enabling autowire by type for MapperFactoryBean with name 'userMapper'.
2017-07-11 10:51:29  [ main:4080 ] - [ DEBUG ]  Logging initialized using 'class org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.
2017-07-11 10:51:29  [ main:4241 ] - [ DEBUG ]  Parsed configuration file: 'class path resource [mybatis/mybatis-config.xml]'
2017-07-11 10:51:29  [ main:4276 ] - [ DEBUG ]  Registered shutdownHook
2017-07-11 10:51:29  [ main:4280 ] - [ DEBUG ]  Registering 'null' house keeper
2017-07-11 10:51:29  [ main:4282 ] - [ DEBUG ]  Starting a house keeper thread
2017-07-11 10:51:29  [ main:4582 ] - [ DEBUG ]  Remembering default value: getTransactionIsolation() = 4
2017-07-11 10:51:29  [ main:4584 ] - [ DEBUG ]  Remembering default value: getHoldability() = 2
2017-07-11 10:51:29  [ main:4585 ] - [ DEBUG ]  Remembering default value: getCatalog() = zhrclound
2017-07-11 10:51:29  [ main:4587 ] - [ DEBUG ]  Remembering default value: isReadOnly() = false
2017-07-11 10:51:29  [ main:4588 ] - [ DEBUG ]  Remembering default value: getTypeMap() = {}
2017-07-11 10:51:29  [ main:4589 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 10:51:29  [ Prototyper:4590 ] - [ INFO ]  Proxool statistics legend: "s - r  (a/t/o)" > s=served, r=refused (only shown if non-zero), a=active, t=total, o=offline (being tested)
2017-07-11 10:51:29  [ Prototyper:4592 ] - [ DEBUG ]  000000 (01/02/00) - Connection #2 created to achieve minimum of 2 = AVAILABLE
2017-07-11 10:51:29  [ main:4592 ] - [ DEBUG ]  000000 (01/02/00) - Connection #1 created on demand = ACTIVE
2017-07-11 10:51:29  [ main:4653 ] - [ DEBUG ]  Implementing interface java.lang.AutoCloseable
2017-07-11 10:51:29  [ main:4654 ] - [ DEBUG ]  Implementing interface java.sql.Connection
2017-07-11 10:51:29  [ main:4654 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 10:51:29  [ main:4655 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.MySQLConnection
2017-07-11 10:51:29  [ main:4655 ] - [ DEBUG ]  Implementing interface java.io.Serializable
2017-07-11 10:51:29  [ main:4656 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.Connection
2017-07-11 10:51:29  [ main:4657 ] - [ DEBUG ]  Implementing interface com.mysql.jdbc.ConnectionProperties
2017-07-11 10:51:30  [ main:5383 ] - [ DEBUG ]  Implementing interface java.sql.Wrapper
2017-07-11 10:51:30  [ main:5384 ] - [ DEBUG ]  Implementing interface java.sql.DatabaseMetaData
2017-07-11 10:51:30  [ main:5670 ] - [ DEBUG ]  Parsed mapper file: 'file [D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes\mapper\UserMapper.xml]'
2017-07-11 10:51:30  [ main:5753 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Protocol$Adpative implements com.alibaba.dubbo.rpc.Protocol {
public void destroy() {throw new UnsupportedOperationException("method public abstract void com.alibaba.dubbo.rpc.Protocol.destroy() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public int getDefaultPort() {throw new UnsupportedOperationException("method public abstract int com.alibaba.dubbo.rpc.Protocol.getDefaultPort() of interface com.alibaba.dubbo.rpc.Protocol is not adaptive method!");
}
public com.alibaba.dubbo.rpc.Invoker refer(java.lang.Class arg0, com.alibaba.dubbo.common.URL arg1) throws java.lang.Class {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.refer(arg0, arg1);
}
public com.alibaba.dubbo.rpc.Exporter export(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.Protocol) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.Protocol extension = (com.alibaba.dubbo.rpc.Protocol)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.Protocol.class).getExtension(extName);
return extension.export(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:30  [ main:5920 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ProxyFactory$Adpative implements com.alibaba.dubbo.rpc.ProxyFactory {
public java.lang.Object getProxy(com.alibaba.dubbo.rpc.Invoker arg0) throws com.alibaba.dubbo.rpc.Invoker {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.Invoker argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getProxy(arg0);
}
public com.alibaba.dubbo.rpc.Invoker getInvoker(java.lang.Object arg0, java.lang.Class arg1, com.alibaba.dubbo.common.URL arg2) throws java.lang.Object {
if (arg2 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg2;
String extName = url.getParameter("proxy", "javassist");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.ProxyFactory) name from url(" + url.toString() + ") use keys([proxy])");
com.alibaba.dubbo.rpc.ProxyFactory extension = (com.alibaba.dubbo.rpc.ProxyFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.ProxyFactory.class).getExtension(extName);
return extension.getInvoker(arg0, arg1, arg2);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6044 ] - [ INFO ]   [DUBBO] The service ready on spring started. service: com.openhr.pm.service.UserService, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6213 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.validation;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Validation$Adpative implements com.alibaba.dubbo.validation.Validation {
public com.alibaba.dubbo.validation.Validator getValidator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("validation", "jvalidation");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.validation.Validation) name from url(" + url.toString() + ") use keys([validation])");
com.alibaba.dubbo.validation.Validation extension = (com.alibaba.dubbo.validation.Validation)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.validation.Validation.class).getExtension(extName);
return extension.getValidator(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6239 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.monitor;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class MonitorFactory$Adpative implements com.alibaba.dubbo.monitor.MonitorFactory {
public com.alibaba.dubbo.monitor.Monitor getMonitor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.monitor.MonitorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.monitor.MonitorFactory extension = (com.alibaba.dubbo.monitor.MonitorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.monitor.MonitorFactory.class).getExtension(extName);
return extension.getMonitor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6256 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.cache;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class CacheFactory$Adpative implements com.alibaba.dubbo.cache.CacheFactory {
public com.alibaba.dubbo.cache.Cache getCache(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("cache", "lru");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.cache.CacheFactory) name from url(" + url.toString() + ") use keys([cache])");
com.alibaba.dubbo.cache.CacheFactory extension = (com.alibaba.dubbo.cache.CacheFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.cache.CacheFactory.class).getExtension(extName);
return extension.getCache(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6272 ] - [ INFO ]   [DUBBO] Export dubbo service com.openhr.pm.service.UserService to local registry, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6273 ] - [ INFO ]   [DUBBO] Export dubbo service com.openhr.pm.service.UserService to url dubbo://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=6476&side=provider&timestamp=1499741491083, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6273 ] - [ INFO ]   [DUBBO] Register dubbo service com.openhr.pm.service.UserService url dubbo://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=6476&side=provider&timestamp=1499741491083 to registry registry://192.168.1.151:2181/com.alibaba.dubbo.registry.RegistryService?application=hr-permission-service&backup=192.168.1.152:2181,192.168.1.153:2181&dubbo=2.8.4&organization=dubbox&owner=programmer&pid=6476&registry=zookeeper&timestamp=1499741491066, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6276 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.registry;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RegistryFactory$Adpative implements com.alibaba.dubbo.registry.RegistryFactory {
public com.alibaba.dubbo.registry.Registry getRegistry(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = ( url.getProtocol() == null ? "dubbo" : url.getProtocol() );
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.registry.RegistryFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.registry.RegistryFactory extension = (com.alibaba.dubbo.registry.RegistryFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.registry.RegistryFactory.class).getExtension(extName);
return extension.getRegistry(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6293 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Cluster$Adpative implements com.alibaba.dubbo.rpc.cluster.Cluster {
public com.alibaba.dubbo.rpc.Invoker join(com.alibaba.dubbo.rpc.cluster.Directory arg0) throws com.alibaba.dubbo.rpc.cluster.Directory {
if (arg0 == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument == null");
if (arg0.getUrl() == null) throw new IllegalArgumentException("com.alibaba.dubbo.rpc.cluster.Directory argument getUrl() == null");com.alibaba.dubbo.common.URL url = arg0.getUrl();
String extName = url.getParameter("cluster", "failover");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.Cluster) name from url(" + url.toString() + ") use keys([cluster])");
com.alibaba.dubbo.rpc.cluster.Cluster extension = (com.alibaba.dubbo.rpc.cluster.Cluster)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.Cluster.class).getExtension(extName);
return extension.join(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6328 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Transporter$Adpative implements com.alibaba.dubbo.remoting.Transporter {
public com.alibaba.dubbo.remoting.Server bind(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("server", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([server, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.bind(arg0, arg1);
}
public com.alibaba.dubbo.remoting.Client connect(com.alibaba.dubbo.common.URL arg0, com.alibaba.dubbo.remoting.ChannelHandler arg1) throws com.alibaba.dubbo.common.URL {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "netty"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Transporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.Transporter extension = (com.alibaba.dubbo.remoting.Transporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Transporter.class).getExtension(extName);
return extension.connect(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6368 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.remoting;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class Dispatcher$Adpative implements com.alibaba.dubbo.remoting.Dispatcher {
public com.alibaba.dubbo.remoting.ChannelHandler dispatch(com.alibaba.dubbo.remoting.ChannelHandler arg0, com.alibaba.dubbo.common.URL arg1) {
if (arg1 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg1;
String extName = url.getParameter("dispatcher", url.getParameter("dispather", url.getParameter("channel.handler", "all")));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.Dispatcher) name from url(" + url.toString() + ") use keys([dispatcher, dispather, channel.handler])");
com.alibaba.dubbo.remoting.Dispatcher extension = (com.alibaba.dubbo.remoting.Dispatcher)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.Dispatcher.class).getExtension(extName);
return extension.dispatch(arg0, arg1);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6397 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.common.threadpool;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ThreadPool$Adpative implements com.alibaba.dubbo.common.threadpool.ThreadPool {
public java.util.concurrent.Executor getExecutor(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("threadpool", "fixed");
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.common.threadpool.ThreadPool) name from url(" + url.toString() + ") use keys([threadpool])");
com.alibaba.dubbo.common.threadpool.ThreadPool extension = (com.alibaba.dubbo.common.threadpool.ThreadPool)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.common.threadpool.ThreadPool.class).getExtension(extName);
return extension.getExecutor(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6470 ] - [ DEBUG ]   [DUBBO] Using the autodetected NIO constraint level: 0, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6555 ] - [ INFO ]   [DUBBO] Start NettyServer bind /0.0.0.0:20880, export /169.254.90.239:20880, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6564 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.remoting.zookeeper;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ZookeeperTransporter$Adpative implements com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter {
public com.alibaba.dubbo.remoting.zookeeper.ZookeeperClient connect(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getParameter("client", url.getParameter("transporter", "zkclient"));
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter) name from url(" + url.toString() + ") use keys([client, transporter])");
com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter extension = (com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.remoting.zookeeper.ZookeeperTransporter.class).getExtension(extName);
return extension.connect(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6588 ] - [ INFO ]   [DUBBO] Load registry store file D:\我的文档\.dubbo\dubbo-registry-192.168.1.151.cache, data: {com.openhr.pm.service.UserService=empty://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=3656&side=provider&timestamp=1499738830386}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:31  [ main:6619 ] - [ DEBUG ]  Creating new ZookKeeper instance to connect to 192.168.1.151:2181,192.168.1.152:2181,192.168.1.153:2181.
2017-07-11 10:51:31  [ ZkClient-EventThread-17-192.168.1.151:2181,192.168.1.152:2181,192.168.1.153:2181:6619 ] - [ INFO ]  Starting ZkClient event thread.
2017-07-11 10:51:31  [ main:6629 ] - [ INFO ]  Client environment:zookeeper.version=3.4.5-1392090, built on 09/30/2012 17:52 GMT
2017-07-11 10:51:31  [ main:6629 ] - [ INFO ]  Client environment:host.name=GZH-20140819YRW
2017-07-11 10:51:31  [ main:6630 ] - [ INFO ]  Client environment:java.version=1.7.0_13
2017-07-11 10:51:31  [ main:6630 ] - [ INFO ]  Client environment:java.vendor=Oracle Corporation
2017-07-11 10:51:31  [ main:6630 ] - [ INFO ]  Client environment:java.home=D:\Program Files (x86)\Java\jdk_1.7.0\jre
2017-07-11 10:51:31  [ main:6631 ] - [ INFO ]  Client environment:java.class.path=D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\test-classes;D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service\target\classes;D:\workspace\githubwork\kikihr\hr-parent\hr-permission-facade\target\classes;I:\localRepository\junit\junit\4.11\junit-4.11.jar;I:\localRepository\org\hamcrest\hamcrest-core\1.3\hamcrest-core-1.3.jar;I:\localRepository\org\springframework\spring-test\4.1.5.RELEASE\spring-test-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-core\4.1.5.RELEASE\spring-core-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-webmvc\4.1.5.RELEASE\spring-webmvc-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-beans\4.1.5.RELEASE\spring-beans-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-context\4.1.5.RELEASE\spring-context-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-expression\4.1.5.RELEASE\spring-expression-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-web\4.1.5.RELEASE\spring-web-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-jdbc\4.1.5.RELEASE\spring-jdbc-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-tx\4.1.5.RELEASE\spring-tx-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-orm\4.1.5.RELEASE\spring-orm-4.1.5.RELEASE.jar;I:\localRepository\org\springframework\spring-aop\4.1.5.RELEASE\spring-aop-4.1.5.RELEASE.jar;I:\localRepository\aopalliance\aopalliance\1.0\aopalliance-1.0.jar;I:\localRepository\org\springframework\spring-aspects\4.1.5.RELEASE\spring-aspects-4.1.5.RELEASE.jar;I:\localRepository\org\aspectj\aspectjweaver\1.8.5\aspectjweaver-1.8.5.jar;I:\localRepository\com\cloudhopper\proxool\proxool\0.9.1\proxool-0.9.1.jar;I:\localRepository\com\cloudhopper\proxool\proxool-cglib\0.9.1\proxool-cglib-0.9.1.jar;I:\localRepository\avalon-framework\avalon-framework-api\4.3\avalon-framework-api-4.3.jar;I:\localRepository\avalon-logkit\avalon-logkit\2.1\avalon-logkit-2.1.jar;I:\localRepository\geronimo-spec\geronimo-spec-javamail\1.3.1-rc3\geronimo-spec-javamail-1.3.1-rc3.jar;I:\localRepository\geronimo-spec\geronimo-spec-jms\1.1-rc4\geronimo-spec-jms-1.1-rc4.jar;I:\localRepository\commons-fileupload\commons-fileupload\1.2.2\commons-fileupload-1.2.2.jar;I:\localRepository\org\apache\commons\commons-lang3\3.3.1\commons-lang3-3.3.1.jar;I:\localRepository\commons-io\commons-io\2.4\commons-io-2.4.jar;I:\localRepository\commons-dbcp\commons-dbcp\1.4\commons-dbcp-1.4.jar;I:\localRepository\commons-pool\commons-pool\1.5.4\commons-pool-1.5.4.jar;I:\localRepository\commons-logging\commons-logging\1.1.3\commons-logging-1.1.3.jar;I:\localRepository\commons-codec\commons-codec\1.6\commons-codec-1.6.jar;I:\localRepository\org\codehaus\jackson\jackson-mapper-asl\1.9.11\jackson-mapper-asl-1.9.11.jar;I:\localRepository\org\codehaus\jackson\jackson-core-asl\1.9.11\jackson-core-asl-1.9.11.jar;I:\localRepository\com\alibaba\fastjson\1.1.26\fastjson-1.1.26.jar;I:\localRepository\org\slf4j\slf4j-api\1.7.6\slf4j-api-1.7.6.jar;I:\localRepository\org\slf4j\jul-to-slf4j\1.7.6\jul-to-slf4j-1.7.6.jar;I:\localRepository\org\slf4j\jcl-over-slf4j\1.7.6\jcl-over-slf4j-1.7.6.jar;I:\localRepository\log4j\log4j\1.2.15\log4j-1.2.15.jar;I:\localRepository\javax\mail\mail\1.4\mail-1.4.jar;I:\localRepository\javax\servlet\jstl\1.2\jstl-1.2.jar;I:\localRepository\javax\servlet\servlet-api\3.0-alpha-1\servlet-api-3.0-alpha-1.jar;I:\localRepository\com\alibaba\rocketmq\rocketmq-client\3.2.6\rocketmq-client-3.2.6.jar;I:\localRepository\com\alibaba\rocketmq\rocketmq-common\3.2.6\rocketmq-common-3.2.6.jar;I:\localRepository\com\alibaba\rocketmq\rocketmq-remoting\3.2.6\rocketmq-remoting-3.2.6.jar;I:\localRepository\io\netty\netty-all\4.0.25.Final\netty-all-4.0.25.Final.jar;I:\localRepository\org\apache\httpcomponents\httpclient-cache\4.3.1\httpclient-cache-4.3.1.jar;I:\localRepository\org\apache\httpcomponents\httpclient\4.3.1\httpclient-4.3.1.jar;I:\localRepository\org\apache\httpcomponents\httpcore\4.3.1\httpcore-4.3.1.jar;I:\localRepository\org\apache\zookeeper\zookeeper\3.4.5\zookeeper-3.4.5.jar;I:\localRepository\org\slf4j\slf4j-log4j12\1.6.1\slf4j-log4j12-1.6.1.jar;I:\localRepository\jline\jline\0.9.94\jline-0.9.94.jar;I:\localRepository\org\jboss\netty\netty\3.2.2.Final\netty-3.2.2.Final.jar;I:\localRepository\com\101tec\zkclient\0.7\zkclient-0.7.jar;I:\localRepository\org\apache\curator\curator-framework\2.5.0\curator-framework-2.5.0.jar;I:\localRepository\org\apache\curator\curator-client\2.5.0\curator-client-2.5.0.jar;I:\localRepository\com\google\guava\guava\16.0.1\guava-16.0.1.jar;I:\localRepository\org\apache\curator\curator-recipes\2.4.2\curator-recipes-2.4.2.jar;I:\localRepository\redis\clients\jedis\2.7.2\jedis-2.7.2.jar;I:\localRepository\org\apache\commons\commons-pool2\2.3\commons-pool2-2.3.jar;I:\localRepository\com\alibaba\dubbo\2.8.4\dubbo-2.8.4.jar;I:\localRepository\org\apache\tomcat\embed\tomcat-embed-core\8.0.11\tomcat-embed-core-8.0.11.jar;I:\localRepository\org\apache\tomcat\embed\tomcat-embed-logging-juli\8.0.11\tomcat-embed-logging-juli-8.0.11.jar;I:\localRepository\org\javassist\javassist\3.15.0-GA\javassist-3.15.0-GA.jar;I:\localRepository\org\apache\mina\mina-core\1.1.7\mina-core-1.1.7.jar;I:\localRepository\org\glassfish\grizzly\grizzly-core\2.1.4\grizzly-core-2.1.4.jar;I:\localRepository\org\glassfish\grizzly\grizzly-framework\2.1.4\grizzly-framework-2.1.4.jar;I:\localRepository\org\glassfish\gmbal\gmbal-api-only\3.0.0-b023\gmbal-api-only-3.0.0-b023.jar;I:\localRepository\org\glassfish\external\management-api\3.0.0-b012\management-api-3.0.0-b012.jar;I:\localRepository\org\glassfish\grizzly\grizzly-portunif\2.1.4\grizzly-portunif-2.1.4.jar;I:\localRepository\org\glassfish\grizzly\grizzly-rcm\2.1.4\grizzly-rcm-2.1.4.jar;I:\localRepository\com\thoughtworks\xstream\xstream\1.4.1\xstream-1.4.1.jar;I:\localRepository\xmlpull\xmlpull\1.1.3.1\xmlpull-1.1.3.1.jar;I:\localRepository\xpp3\xpp3_min\1.1.4c\xpp3_min-1.1.4c.jar;I:\localRepository\org\apache\bsf\bsf-api\3.1\bsf-api-3.1.jar;I:\localRepository\com\googlecode\xmemcached\xmemcached\1.3.6\xmemcached-1.3.6.jar;I:\localRepository\org\apache\cxf\cxf-rt-frontend-simple\2.6.1\cxf-rt-frontend-simple-2.6.1.jar;I:\localRepository\org\apache\cxf\cxf-api\2.6.1\cxf-api-2.6.1.jar;I:\localRepository\org\codehaus\woodstox\woodstox-core-asl\4.1.2\woodstox-core-asl-4.1.2.jar;I:\localRepository\org\codehaus\woodstox\stax2-api\3.1.1\stax2-api-3.1.1.jar;I:\localRepository\org\apache\ws\xmlschema\xmlschema-core\2.0.2\xmlschema-core-2.0.2.jar;I:\localRepository\org\apache\geronimo\specs\geronimo-javamail_1.4_spec\1.7.1\geronimo-javamail_1.4_spec-1.7.1.jar;I:\localRepository\wsdl4j\wsdl4j\1.6.2\wsdl4j-1.6.2.jar;I:\localRepository\org\apache\cxf\cxf-rt-core\2.6.1\cxf-rt-core-2.6.1.jar;I:\localRepository\org\apache\cxf\cxf-rt-bindings-soap\2.6.1\cxf-rt-bindings-soap-2.6.1.jar;I:\localRepository\org\apache\cxf\cxf-rt-databinding-jaxb\2.6.1\cxf-rt-databinding-jaxb-2.6.1.jar;I:\localRepository\org\apache\cxf\cxf-rt-transports-http\2.6.1\cxf-rt-transports-http-2.6.1.jar;I:\localRepository\org\apache\thrift\libthrift\0.8.0\libthrift-0.8.0.jar;I:\localRepository\commons-lang\commons-lang\2.5\commons-lang-2.5.jar;I:\localRepository\com\caucho\hessian\4.0.7\hessian-4.0.7.jar;I:\localRepository\org\mortbay\jetty\jetty\6.1.26\jetty-6.1.26.jar;I:\localRepository\org\mortbay\jetty\jetty-util\6.1.26\jetty-util-6.1.26.jar;I:\localRepository\javax\validation\validation-api\1.0.0.GA\validation-api-1.0.0.GA.jar;I:\localRepository\org\hibernate\hibernate-validator\4.2.0.Final\hibernate-validator-4.2.0.Final.jar;I:\localRepository\javax\cache\cache-api\0.4\cache-api-0.4.jar;I:\localRepository\javax\ws\rs\javax.ws.rs-api\2.0\javax.ws.rs-api-2.0.jar;I:\localRepository\org\jboss\resteasy\resteasy-jaxrs\3.0.7.Final\resteasy-jaxrs-3.0.7.Final.jar;I:\localRepository\org\jboss\resteasy\jaxrs-api\3.0.7.Final\jaxrs-api-3.0.7.Final.jar;I:\localRepository\org\jboss\spec\javax\annotation\jboss-annotations-api_1.1_spec\1.0.1.Final\jboss-annotations-api_1.1_spec-1.0.1.Final.jar;I:\localRepository\javax\activation\activation\1.1\activation-1.1.jar;I:\localRepository\net\jcip\jcip-annotations\1.0\jcip-annotations-1.0.jar;I:\localRepository\org\jboss\resteasy\resteasy-client\3.0.7.Final\resteasy-client-3.0.7.Final.jar;I:\localRepository\org\jboss\resteasy\resteasy-netty\3.0.7.Final\resteasy-netty-3.0.7.Final.jar;I:\localRepository\io\netty\netty\3.6.4.Final\netty-3.6.4.Final.jar;I:\localRepository\org\jboss\resteasy\resteasy-jdk-http\3.0.7.Final\resteasy-jdk-http-3.0.7.Final.jar;I:\localRepository\org\jboss\resteasy\resteasy-jackson-provider\3.0.7.Final\resteasy-jackson-provider-3.0.7.Final.jar;I:\localRepository\org\codehaus\jackson\jackson-jaxrs\1.9.12\jackson-jaxrs-1.9.12.jar;I:\localRepository\org\codehaus\jackson\jackson-xc\1.9.12\jackson-xc-1.9.12.jar;I:\localRepository\org\jboss\resteasy\resteasy-jaxb-provider\3.0.7.Final\resteasy-jaxb-provider-3.0.7.Final.jar;I:\localRepository\com\sun\xml\bind\jaxb-impl\2.2.7\jaxb-impl-2.2.7.jar;I:\localRepository\com\sun\xml\bind\jaxb-core\2.2.7\jaxb-core-2.2.7.jar;I:\localRepository\javax\xml\bind\jaxb-api\2.2.7\jaxb-api-2.2.7.jar;I:\localRepository\com\sun\istack\istack-commons-runtime\2.16\istack-commons-runtime-2.16.jar;I:\localRepository\com\sun\xml\fastinfoset\FastInfoset\1.2.12\FastInfoset-1.2.12.jar;I:\localRepository\javax\xml\bind\jsr173_api\1.0\jsr173_api-1.0.jar;I:\localRepository\com\esotericsoftware\kryo\kryo\2.24.0\kryo-2.24.0.jar;I:\localRepository\com\esotericsoftware\minlog\minlog\1.2\minlog-1.2.jar;I:\localRepository\org\objenesis\objenesis\2.1\objenesis-2.1.jar;I:\localRepository\de\javakaffee\kryo-serializers\0.26\kryo-serializers-0.26.jar;I:\localRepository\de\ruedigermoeller\fst\1.55\fst-1.55.jar;I:\localRepository\org\jasig\cas\client\cas-client-core\3.1.12\cas-client-core-3.1.12.jar;I:\localRepository\org\mybatis\mybatis\3.2.1\mybatis-3.2.1.jar;I:\localRepository\org\mybatis\mybatis-spring\1.2.0\mybatis-spring-1.2.0.jar;I:\localRepository\com\github\pagehelper\pagehelper\4.0.0\pagehelper-4.0.0.jar;I:\localRepository\com\github\jsqlparser\jsqlparser\0.9.1\jsqlparser-0.9.1.jar;I:\localRepository\mysql\mysql-connector-java\5.1.29\mysql-connector-java-5.1.29.jar
2017-07-11 10:51:31  [ main:6631 ] - [ INFO ]  Client environment:java.library.path=D:\Program Files (x86)\Java\jdk_1.7.0\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;C:\ProgramData\Oracle\Java\javapath;C:\Program Files (x86)\AMD APP\bin\x86_64;C:\Program Files (x86)\AMD APP\bin\x86;H:\oracle\app\oracle\product\11.2.0\server\bin;D:\Program Files (x86)\Java\jdk_1.7.0\bin;D:\Program Files (x86)\Java\jdk_1.7.0\jre\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;D:\Program Files (x86)\Java\apache-maven-3.3.9\bin;D:\Program Files\nodejs\;D:\Program Files\ATI Technologies\ATI.ACE\Core-Static;D:\Program Files\tortoisegit\bin;C:\Users\Administrator\AppData\Roaming\npm;.
2017-07-11 10:51:31  [ main:6631 ] - [ INFO ]  Client environment:java.io.tmpdir=C:\Users\ADMINI~1\AppData\Local\Temp\
2017-07-11 10:51:31  [ main:6632 ] - [ INFO ]  Client environment:java.compiler=<NA>
2017-07-11 10:51:31  [ main:6632 ] - [ INFO ]  Client environment:os.name=Windows 7
2017-07-11 10:51:31  [ main:6632 ] - [ INFO ]  Client environment:os.arch=amd64
2017-07-11 10:51:31  [ main:6633 ] - [ INFO ]  Client environment:os.version=6.1
2017-07-11 10:51:31  [ main:6633 ] - [ INFO ]  Client environment:user.name=Administrator
2017-07-11 10:51:31  [ main:6633 ] - [ INFO ]  Client environment:user.home=D:\我的文档
2017-07-11 10:51:31  [ main:6634 ] - [ INFO ]  Client environment:user.dir=D:\workspace\githubwork\kikihr\hr-parent\hr-permission-service
2017-07-11 10:51:31  [ main:6635 ] - [ INFO ]  Initiating client connection, connectString=192.168.1.151:2181,192.168.1.152:2181,192.168.1.153:2181 sessionTimeout=60000 watcher=org.I0Itec.zkclient.ZkClient@46b7c4a0
2017-07-11 10:51:31  [ main:6640 ] - [ DEBUG ]  zookeeper.disableAutoWatchReset is false
2017-07-11 10:51:31  [ main:6653 ] - [ DEBUG ]  Awaiting connection to Zookeeper server
2017-07-11 10:51:31  [ main:6654 ] - [ INFO ]  Waiting for keeper state SyncConnected
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9225 ] - [ INFO ]  Opening socket connection to server 192.168.1.152/192.168.1.152:2181. Will not attempt to authenticate using SASL (unknown error)
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9233 ] - [ INFO ]  Socket connection established to 192.168.1.152/192.168.1.152:2181, initiating session
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9238 ] - [ DEBUG ]  Session establishment request sent on 192.168.1.152/192.168.1.152:2181
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9255 ] - [ INFO ]  Session establishment complete on server 192.168.1.152/192.168.1.152:2181, sessionid = 0x15d290e19740000, negotiated timeout = 40000
2017-07-11 10:51:34  [ main-EventThread:9257 ] - [ DEBUG ]  Received event: WatchedEvent state:SyncConnected type:None path:null
2017-07-11 10:51:34  [ main-EventThread:9258 ] - [ INFO ]  zookeeper state changed (SyncConnected)
2017-07-11 10:51:34  [ main-EventThread:9258 ] - [ DEBUG ]  Leaving process event
2017-07-11 10:51:34  [ main:9258 ] - [ DEBUG ]  State is SyncConnected
2017-07-11 10:51:34  [ main:9260 ] - [ INFO ]   [DUBBO] Register: dubbo://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=6476&side=provider&timestamp=1499741491083, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9285 ] - [ DEBUG ]  Reading reply sessionid:0x15d290e19740000, packet:: clientPath:null serverPath:null finished:false header:: 1,1  replyHeader:: 1,8589934607,-110  request:: '/dubbo,,v{s{31,s{'world,'anyone}}},0  response::  
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9300 ] - [ DEBUG ]  Reading reply sessionid:0x15d290e19740000, packet:: clientPath:null serverPath:null finished:false header:: 2,1  replyHeader:: 2,8589934608,-110  request:: '/dubbo/com.openhr.pm.service.UserService,,v{s{31,s{'world,'anyone}}},0  response::  
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9307 ] - [ DEBUG ]  Reading reply sessionid:0x15d290e19740000, packet:: clientPath:null serverPath:null finished:false header:: 3,1  replyHeader:: 3,8589934609,-110  request:: '/dubbo/com.openhr.pm.service.UserService/providers,,v{s{31,s{'world,'anyone}}},0  response::  
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9321 ] - [ DEBUG ]  Reading reply sessionid:0x15d290e19740000, packet:: clientPath:null serverPath:null finished:false header:: 4,1  replyHeader:: 4,8589934610,0  request:: '/dubbo/com.openhr.pm.service.UserService/providers/dubbo%253A%252F%252F169.254.90.239%253A20880%252Fcom.openhr.pm.service.UserService%253Fanyhost%253Dtrue%2526application%253Dhr-permission-service%2526dubbo%253D2.8.4%2526generic%253Dfalse%2526interface%253Dcom.openhr.pm.service.UserService%2526methods%253Dtestget%252CselectUserById%252CqueryByPage%252CaddNew%2526organization%253Ddubbox%2526owner%253Dprogrammer%2526pid%253D6476%2526side%253Dprovider%2526timestamp%253D1499741491083,,v{s{31,s{'world,'anyone}}},1  response:: '/dubbo/com.openhr.pm.service.UserService/providers/dubbo%253A%252F%252F169.254.90.239%253A20880%252Fcom.openhr.pm.service.UserService%253Fanyhost%253Dtrue%2526application%253Dhr-permission-service%2526dubbo%253D2.8.4%2526generic%253Dfalse%2526interface%253Dcom.openhr.pm.service.UserService%2526methods%253Dtestget%252CselectUserById%252CqueryByPage%252CaddNew%2526organization%253Ddubbox%2526owner%253Dprogrammer%2526pid%253D6476%2526side%253Dprovider%2526timestamp%253D1499741491083 
2017-07-11 10:51:34  [ main:9323 ] - [ INFO ]   [DUBBO] Subscribe: provider://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=6476&side=provider&timestamp=1499741491083, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9330 ] - [ DEBUG ]  Reading reply sessionid:0x15d290e19740000, packet:: clientPath:null serverPath:null finished:false header:: 5,1  replyHeader:: 5,8589934611,-110  request:: '/dubbo,,v{s{31,s{'world,'anyone}}},0  response::  
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9350 ] - [ DEBUG ]  Reading reply sessionid:0x15d290e19740000, packet:: clientPath:null serverPath:null finished:false header:: 6,1  replyHeader:: 6,8589934612,-110  request:: '/dubbo/com.openhr.pm.service.UserService,,v{s{31,s{'world,'anyone}}},0  response::  
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9357 ] - [ DEBUG ]  Reading reply sessionid:0x15d290e19740000, packet:: clientPath:null serverPath:null finished:false header:: 7,1  replyHeader:: 7,8589934613,-110  request:: '/dubbo/com.openhr.pm.service.UserService/configurators,,v{s{31,s{'world,'anyone}}},0  response::  
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9367 ] - [ DEBUG ]  Reading reply sessionid:0x15d290e19740000, packet:: clientPath:null serverPath:null finished:false header:: 8,3  replyHeader:: 8,8589934613,0  request:: '/dubbo/com.openhr.pm.service.UserService/configurators,T  response:: s{8589934603,8589934603,1499634795131,1499634795131,0,0,0,0,0,0,8589934603} 
2017-07-11 10:51:34  [ main-SendThread(192.168.1.152:2181):9378 ] - [ DEBUG ]  Reading reply sessionid:0x15d290e19740000, packet:: clientPath:null serverPath:null finished:false header:: 9,8  replyHeader:: 9,8589934613,0  request:: '/dubbo/com.openhr.pm.service.UserService/configurators,T  response:: v{} 
2017-07-11 10:51:34  [ main:9379 ] - [ INFO ]   [DUBBO] Notify urls for subscribe url provider://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=6476&side=provider&timestamp=1499741491083, urls: [empty://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&category=configurators&check=false&dubbo=2.8.4&generic=false&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=6476&side=provider&timestamp=1499741491083], dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:34  [ main:9390 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class RouterFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.RouterFactory {
public com.alibaba.dubbo.rpc.cluster.Router getRouter(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.RouterFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.RouterFactory extension = (com.alibaba.dubbo.rpc.cluster.RouterFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.RouterFactory.class).getExtension(extName);
return extension.getRouter(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:34  [ main:9404 ] - [ DEBUG ]   [DUBBO] package com.alibaba.dubbo.rpc.cluster;
import com.alibaba.dubbo.common.extension.ExtensionLoader;
public class ConfiguratorFactory$Adpative implements com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory {
public com.alibaba.dubbo.rpc.cluster.Configurator getConfigurator(com.alibaba.dubbo.common.URL arg0) {
if (arg0 == null) throw new IllegalArgumentException("url == null");
com.alibaba.dubbo.common.URL url = arg0;
String extName = url.getProtocol();
if(extName == null) throw new IllegalStateException("Fail to get extension(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory) name from url(" + url.toString() + ") use keys([protocol])");
com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory extension = (com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory)ExtensionLoader.getExtensionLoader(com.alibaba.dubbo.rpc.cluster.ConfiguratorFactory.class).getExtension(extName);
return extension.getConfigurator(arg0);
}
}, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:51:47  [ main-SendThread(192.168.1.152:2181):22707 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:52:01  [ main-SendThread(192.168.1.152:2181):36048 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 4ms
2017-07-11 10:52:07  [ DubboServerHandler-169.254.90.239:20880-thread-2:42096 ] - [ DEBUG ]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:52:07  [ New I/O server worker #1-1:42150 ] - [ WARN ]   [DUBBO] All clients has discontected from /169.254.90.239:20880. You can graceful shutdown now., dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:52:07  [ DubboServerHandler-169.254.90.239:20880-thread-3:42152 ] - [ INFO ]   [DUBBO] disconected from /169.254.90.239:3099,url:dubbo://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&channel.readonly.sent=true&codec=dubbo&dubbo=2.8.4&generic=false&heartbeat=60000&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=6476&side=provider&timestamp=1499741491083, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:52:14  [ main-SendThread(192.168.1.152:2181):49380 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 2ms
2017-07-11 10:52:27  [ main-SendThread(192.168.1.152:2181):62716 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:52:41  [ main-SendThread(192.168.1.152:2181):76050 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 3ms
2017-07-11 10:52:54  [ main-SendThread(192.168.1.152:2181):89383 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:53:07  [ main-SendThread(192.168.1.152:2181):102718 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:53:21  [ main-SendThread(192.168.1.152:2181):116053 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:53:34  [ main-SendThread(192.168.1.152:2181):129388 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 2ms
2017-07-11 10:53:47  [ main-SendThread(192.168.1.152:2181):142721 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:54:01  [ main-SendThread(192.168.1.152:2181):156056 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:54:14  [ main-SendThread(192.168.1.152:2181):169390 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:54:27  [ main-SendThread(192.168.1.152:2181):182723 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:54:41  [ main-SendThread(192.168.1.152:2181):196056 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:54:54  [ main-SendThread(192.168.1.152:2181):209390 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:55:07  [ main-SendThread(192.168.1.152:2181):222723 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:55:21  [ main-SendThread(192.168.1.152:2181):236058 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:55:34  [ main-SendThread(192.168.1.152:2181):249391 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:55:47  [ main-SendThread(192.168.1.152:2181):262724 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:56:01  [ main-SendThread(192.168.1.152:2181):276058 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:56:14  [ main-SendThread(192.168.1.152:2181):289392 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 2ms
2017-07-11 10:56:27  [ main-SendThread(192.168.1.152:2181):302725 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:56:41  [ main-SendThread(192.168.1.152:2181):316059 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:56:52  [ DubboServerHandler-169.254.90.239:20880-thread-5:327276 ] - [ DEBUG ]   [DUBBO] Decode decodeable message com.alibaba.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:56:52  [ New I/O server worker #1-2:327325 ] - [ WARN ]   [DUBBO] All clients has discontected from /169.254.90.239:20880. You can graceful shutdown now., dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:56:52  [ DubboServerHandler-169.254.90.239:20880-thread-6:327326 ] - [ INFO ]   [DUBBO] disconected from /169.254.90.239:3190,url:dubbo://169.254.90.239:20880/com.openhr.pm.service.UserService?anyhost=true&application=hr-permission-service&channel.readonly.sent=true&codec=dubbo&dubbo=2.8.4&generic=false&heartbeat=60000&interface=com.openhr.pm.service.UserService&methods=testget,selectUserById,queryByPage,addNew&organization=dubbox&owner=programmer&pid=6476&side=provider&timestamp=1499741491083, dubbo version: 2.8.4, current host: 127.0.0.1
2017-07-11 10:56:54  [ main-SendThread(192.168.1.152:2181):329393 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:57:07  [ main-SendThread(192.168.1.152:2181):342730 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 3ms
2017-07-11 10:57:21  [ main-SendThread(192.168.1.152:2181):356062 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:57:34  [ main-SendThread(192.168.1.152:2181):369395 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
2017-07-11 10:57:47  [ main-SendThread(192.168.1.152:2181):382729 ] - [ DEBUG ]  Got ping response for sessionid: 0x15d290e19740000 after 1ms
